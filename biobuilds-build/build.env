#------------------------------------------------------------------------------
# Script that sets various environment variables used for building BioBuilds
# packages with "conda build". These are mostly compiler and other toolchain
# flags that enable more aggressive and/or architecture-specific optimizations.
#------------------------------------------------------------------------------

# Sanity check script usage
if [ "$0" == "$BASH_SOURCE" ]; then
    echo "ERROR: '$0' must be sourced; use 'source $0' instead." >&2
    exit 1
fi
if [ -z "$BASH_VERSION" ]; then
    echo "ERROR: '$0' currently only supports the bash shell." >&2
    return
fi


# Generate an error if trying to build packages with the 'opt'-feature using
# the $FEATURE_OPT environment variable instead of conda build variants. In
# theory, we could try to maintain backwards compatibility and deal with this,
# but nailing down all corner cases caused by mixing $FEATURE_* environment
# variables and recipe-specified build variants is probably not worth the pain.
if [[ -z "${toolchain}" && "${FEATURE_OPT:-0}" -eq 1 || "${OPT:-0}" -eq 1 ]]; then
    echo "*** ERROR: Building 'opt'-featured packages using the \$FEATURE_OPT" >&2
    echo "*** ERROR: environment variable is no supported. Please use 'toolchain'" >&2
    echo "*** ERROR: conda build variants instead." >&2
    exit 1
fi


# Set umask to help ensure world-readable package files
umask 022


# Get the platform(s) we're building on (BUILD_*) and for (HOST_*)
: ${BUILD_ARCH:=$(uname -m | tr A-Z a-z)}
: ${BUILD_OS:=$(uname -s | tr A-Z a-z)}
: ${HOST_ARCH:=${BUILD_ARCH}}
: ${HOST_OS:=${BUILD_OS}}
export BUILD_ARCH BUILD_OS
export HOST_ARCH HOST_OS


# If not defined, use all avaialable CPUs for building packages
: ${CPU_COUNT:=1}
: ${MAKE_JOBS:=${CPU_COUNT}}
export MAKE_JOBS


# Save the values of various environment variables set by conda.
for var in \
    CPP CPPFLAGS DEBUG_CPPFLAGS \
    CC CFLAGS DEBUG_CFLAGS \
    CXX CXXFLAGS DEBUG_CXXFLAGS \
    FC F90 F95 FCFLAGS DEBUG_FCFLAGS \
    FORTRANFLAGS DEBUG_FORTRANFLAGS \
    F77 FFLAGS DEBUG_FFLAGS \
    AR LD LDFLAGS;
do
    eval export CONDA_${var}="\${!var}"
done


# autoconf environment variable(s) for setting FORTRAN compiler options
: ${FCFLAGS:="${FORTRANFLAGS}"}
: ${DEBUG_FCFLAGS:="${DEBUG_FORTRANFLAGS}"}
unset FORTRANFLAGS DEBUG_FORTRANFLAGS


# "Force" use of the new Anaconda (5.0+) compilers and linker
#
# For recipes already using the new Anaconda toolchain, this section should
# essentially be a no-op. For recipes that still need to be updated, this
# should cause things like `./configure` and `make` to fail, which serves a
# loud reminder to update the package's recipe ASAP.
if [[ -z "${BUILD_PREFIX}" ]]; then
    BUILD_PREFIX="${PREFIX}"
    export BUILD_PREFIX
fi

slug=
case "${HOST_OS}" in
    "darwin")
        slug="x86_64-apple-darwin13.4.0"

        : ${CPP:="${BUILD_PREFIX}/bin/clang-cpp"}
        : ${CC:="${BUILD_PREFIX}/bin/${slug}clang"}
        : ${CXX:="${BUILD_PREFIX}/bin/${slug}clang++"}
        ;;
    "linux")
        case "${HOST_ARCH}" in
            x86_64)  slug="x86_64-conda_cos6-linux-gnu-" ;;
            ppc64le) slug="powerpc64le-conda_cos7-linux-gnu-" ;;
            *)
                echo "FATAL: Unsupported host architecture '${HOST_ARCH}'" >&2
                exit 1
                ;;
        esac

        : ${CPP:="${BUILD_PREFIX}/bin/${slug}cpp"}
        : ${CC:="${BUILD_PREFIX}/bin/${slug}gcc"}
        : ${CXX:="${BUILD_PREFIX}/bin/${slug}g++"}
        ;;
    *)
        echo "FATAL: Unsupported host operating system '$HOST_OS'" >&2
        exit 1
        ;;
esac

: ${AS:="${BUILD_PREFIX}/bin/${slug}as"}

: ${FC:="${BUILD_PREFIX}/bin/${slug}gfortran"}
: ${F77:="${BUILD_PREFIX}/bin/${slug}gfortran"}
: ${F90:="${BUILD_PREFIX}/bin/${slug}gfortran"}
: ${F95:="${BUILD_PREFIX}/bin/${slug}gfortran"}

: ${AR:="${BUILD_PREFIX}/bin/${slug}ar"}
: ${LD:="${BUILD_PREFIX}/bin/${slug}ld"}

unset slug


# "Hacky" way of checking if various compilers are actually the GNU variants
test -x "${CC:-/dev/null}" && \
    CC_IS_GNU=$("${CC}" --version 2>&1 | egrep -qi 'clang|llvm|intel|pgi'; echo $?) ||
    CC_IS_GNU=
test -x "${CXX:-/dev/null}" && \
    CXX_IS_GNU=$("${CXX}" --version 2>&1 | egrep -qi 'clang|llvm|intel|pgi'; echo $?) ||
    CXX_IS_GNU=
test -x "${FC:-/dev/null}" && \
    FC_IS_GNU=$("${FC}" --version 2>&1 | egrep -qi 'clang|llvm|intel|pgi'; echo $?) ||
    FC_IS_GNU=


# Set "reasonable" defaults for toolchain environment variables
: ${CPPFLAGS:=}
: ${CFLAGS:=-fPIC}
: ${DEBUG_CFLAGS:=-fPIC -g}
: ${CXXFLAGS:=-fPIC}
: ${DEBUG_CXXFLAGS:=-fPIC -g}
: ${FCFLAGS:="-fPIC"}
: ${DEBUG_FCFLAGS:="-fPIC -g"}
: ${FFLAGS:=-fPIC}
: ${DEBUG_FFLAGS:=-fPIC -g}
: ${LDFLAGS:=}


# Remove certain flags set by Anaconda's toolchain packages since we'll be
# providing our own values. In theory, the compilers should be smart enough to
# handle multiple values of these arguments (e.g., providing "-O2 -O3" in the
# same command line), but letting them do so makes it harder for humans to
# understand what exactly is going on when building recipes.
declare -a keep_flags
for var in \
    CPPFLAGS DEBUG_CPPFLAGS \
    CFLAGS DEBUG_CFLAGS \
    CXXFLAGS DEBUG_CXXFLAGS \
    FCFLAGS DEBUG_FCFLAGS \
    FFLAGS DEBUG_FFLAGS \
    LDFLAGS;
do
    keep_flags=()
    for flag in ${!var}; do
        case $flag in
            # Drop these flags...
            -std=*) ;;                      # Language standards
            -march=*|-mcpu=*|-mtune=*) ;;   # Architecture/CPU targets
            -O*) ;;                         # Standard optimization levels

            # ...and keep all other flags
            *) keep_flags+=($flag) ;;
        esac
    done
    eval ${var}="\${keep_flags[@]}"
    export ${var}
done
unset keep_flags


# Architecture-specific flags (mostly for optimizations)
: ${ARCH_FLAGS:=}
case "$HOST_ARCH" in
    "x86_64")
        # Assuming target microarchitecture is Nehalem or later, so we can
        # safely enable SSE4.x instructions; this shouldn't be a _totally_
        # unreasonable assumption since Nehalem was introduced in 2008.
        ARCH_FLAGS="${ARCH_FLAGS} -m64 -march=nehalem -mfpmath=sse"
        ;;
    "ppc64le")
        # Assuming microarchitecture is POWER8 or later.
        ARCH_FLAGS="${ARCH_FLAGS} -m64 -mcpu=power8 -mtune=power8"
        ARCH_FLAGS="${ARCH_FLAGS} -maltivec -mvsx"
        ARCH_FLAGS="${ARCH_FLAGS} -mcmodel=medium"
        ;;
    # TODO: flags for ARMv7 (Raspberry Pi 2 and 3)
esac
export ARCH_FLAGS


# "Generic" (i.e., not architecture-specific) optimization flags
: ${OPT_FLAGS:=}
: ${CC_OPT_FLAGS:=}
: ${CXX_OPT_FLAGS:=}
: ${FC_OPT_FLAGS:=}

OPT_FLAGS="${OPT_FLAGS} -O3"


# GNU-specific "generic" optimization flags"
if [[ "$CC_IS_GNU" -eq 1 ]]; then
    CC_OPT_FLAGS="${CC_OPT_FLAGS} -fpeel-loops -funroll-loops"
    CC_OPT_FLAGS="${CC_OPT_FLAGS} -ftree-vectorize -fvect-cost-model"
fi

if [[ "$CXX_IS_GNU" -eq 1 ]]; then
    CXX_OPT_FLAGS="${CXX_OPT_FLAGS} -fpeel-loops -funroll-loops"
    CXX_OPT_FLAGS="${CXX_OPT_FLAGS} -ftree-vectorize -fvect-cost-model"
fi

if [[ "$FC_IS_GNU" -eq 1 ]]; then
    FC_OPT_FLAGS="${FC_OPT_FLAGS} -fpeel-loops -funroll-loops"
    FC_OPT_FLAGS="${FC_OPT_FLAGS} -ftree-vectorize -fvect-cost-model"
fi

export OPT_FLAGS CC_OPT_FLAGS CXX_OPT_FLAGS FC_OPT_FLAGS


# Add "${PREFIX}/include" and '${PREFIX}/lib" to search paths
for var in CPPFLAGS DEBUG_CPPFLAGS \
           CFLAGS DEBUG_CFLAGS \
           CXXFLAGS DEBUG_CXXFLAGS \
           FCFLAGS DEBUG_FCFLAGS \
           FFLAGS DEBUG_FFLAGS \
           ; do
    if [[ ${!var} != *-I${PREFIX}/include* ]]; then
        eval ${var}=\"\${!var} -I\${PREFIX}/include\"
    fi
done

for var in LDFLAGS; do
    if [[ ${!var} != *-L${PREFIX}/lib* ]]; then
        eval ${var}=\"\${!var} -L\${PREFIX}/lib\"
    fi
done


# Set the environment variables that control compiler options
CFLAGS="${CFLAGS} ${ARCH_FLAGS} ${OPT_FLAGS} ${CC_OPT_FLAGS}"
CXXFLAGS="${CXXFLAGS} ${ARCH_FLAGS} ${OPT_FLAGS} ${CXX_OPT_FLAGS}"
FCFLAGS="${FCFLAGS} ${ARCH_FLAGS} ${OPT_FLAGS} ${FC_OPT_FLAGS}"
FFLAGS="${FFLAGS} ${ARCH_FLAGS} ${OPT_FLAGS} ${FC_OPT_FLAGS}"


# Toolchain selection via conda build variants; this mechanism is typically
# used to build optimized binaries using the CPU manufacturer's toolchain
# (Intel Parallel Studio for x86_64 and IBM Advance Toolchain for POWER).
if [[ "${toolchain:-default}" != "default" ]]; then
    # Ignore (unset) the FEATURE_OPT environment variable when build variants.
    # This prevents us from accidentally `source`-ing the legacy build
    # environment configuration files (see below).
    if [[ ! -z "${FEATURE_OPT}" || ! -z "${OPT}" ]]; then
        echo "*** WARNING: Ignoring \$FEATURE_OPT with build variants." >&2
        unset FEATURE_OPT OPT
    fi

    mydir=$(cd `dirname "${BASH_SOURCE[0]}"` && pwd)
    if [ -f "${mydir}/build-${toolchain}.env" ]; then
        source "${mydir}/build-${toolchain}.env"
    else
        echo "*** ERROR: Could not find ${toolchain} environment file." >&2
        exit 1
    fi
fi


# Make toolchain environment variables available in the environment of
# sub-shells and other child processes during the build process.
export CPP CPPFLAGS
export CC CFLAGS
export CXX CXXFLAGS
export FC F90 F95 FCFLAGS DEBUG_FCFLAGS
export F77 FFLAGS DEBUG_FFLAGS
export AR
export LD LDFLAGS


# If requested, echo out our configured values
if [[ "$1" == "-v" ]]; then
    # Turn off command tracing so the output below doesn't get cluttered up
    if [[ "$-" == *x* ]]; then
        set +x
        restore_x_opt=1
    fi

    echo -e "\n-----  CONFIGURED BUILD ENVIRONMENT  -----"
    for var in BUILD_ARCH BUILD_OS \
        HOST_ARCH HOST_OS \
        CPP CPPFLAGS DEBUG_CPPFLAGS \
        CC CFLAGS DEBUG_CFLAGS \
        CXX CXXFLAGS DEBUG_CXXFLAGS \
        FC F90 F95 FCFLAGS DEBUG_FCFLAGS \
        F77 FFLAGS DEBUG_FFLAGS \
        AR LD LDFLAGS \
        CC_IS_GNU CXX_IS_GNU FC_IS_GNU \
        MAKE_JOBS;
    do
        printf '%-10s = %s\n' "${var}" "${!var}"
    done
    echo -e "-----  CONFIGURED BUILD ENVIRONMENT  -----\n"

    # Restore command tracing (if needed)
    if [[ ${restore_x_opt:-0} -eq 1 ]]; then
        unset restore_x_opt
        set -x
    fi
fi
