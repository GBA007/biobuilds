#!/bin/bash

# Script that sets various BB_* environment variables used to build BioBuilds
# packages using "conda build". These are mostly compiler flags for enabling
# more aggressive and/or architecture-specific optmizations.


# Sanity check script invocation
if [ "$0" == "$BASH_SOURCE" ]; then
    echo "ERROR: '$0' must be sourced; use 'source $0' instead." >&2
    exit 1
fi
if [ -z "$BASH_VERSION" ]; then
    echo "ERROR: '$0' currently only supports the bash shell." >&2
    return
fi


## Max number of make jobs (i.e., value passed to "make -j<N>")
BB_MAKE_JOBS="$1"
[ "$BB_MAKE_JOBS" -gt 0 ] 2>/dev/null || BB_MAKE_JOBS=1


## Set umask to help ensure that files in packages are world-readable
umask 022


## "Hacky" way of checking if "gcc" is really the GNU compiler
BB_GCC_IS_GNU=$(gcc --version 2>&1 | grep -qi llvm; echo $?)


## Architecture-specific flags (mostly for optimizations)
BUILD_ARCH=$(uname -m)
BB_ARCH_FLAGS=
if [[ "$BUILD_ARCH" == "x86_64" ]]; then
    # Assuming microarchitecture is Nehalem or later, so we can safely enable
    # SSE4.x instructions; not an unreasonable assumption since this was
    # introduced in 2008. WARNING: do *NOT* change "-march" from "core2" to
    # more recent microarchitectures (e.g., "corei7"), as those values are not
    # recognized by gcc 4.4.x used by CentOS 6.
    BB_ARCH_FLAGS="${BB_ARCH_FLAGS} -m64 -march=core2 -mfpmath=sse"
    BB_ARCH_FLAGS="${BB_ARCH_FLAGS} -mmmx -msse -msse2 -msse3 -mssse3"
    BB_ARCH_FLAGS="${BB_ARCH_FLAGS} -msse4 -msse4.1 -msse4.2 -mpopcnt"
elif [[ "$BUILD_ARCH" == "ppc64le" ]]; then
    # Assuming microarchitecture is POWER8 or later
    BB_ARCH_FLAGS="${BB_ARCH_FLAGS} -m64 -mcpu=power8 -mtune=power8"
    BB_ARCH_FLAGS="${BB_ARCH_FLAGS} -maltivec -mvsx"
    BB_ARCH_FLAGS="${BB_ARCH_FLAGS} -mcmodel=medium"
# TODO: add flags for ARMv7 (Raspberry Pi 2)
fi
unset BUILD_ARCH


## "Generic" (i.e., not architecture-specific) optimization flags
BB_OPT_FLAGS="-O3"
if [ $BB_GCC_IS_GNU -eq 1 ]; then
    BB_OPT_FLAGS="${BB_OPT_FLAGS} -fpeel-loops -funroll-loops"
    BB_OPT_FLAGS="${BB_OPT_FLAGS} -ftree-vectorize -fvect-cost-model"
fi


## Use "local" conda build dir, if it exists; useful when using docker.
mydir="$(cd `dirname ${BASH_SOURCE}[0]` && pwd)"
[ -d "${mydir}/conda-bld" ] && export CONDA_BLD_PATH="${mydir}/conda-bld"
unset mydir


## Make sure conda build uses the correct Perl version for this release.
# We'd prefer to do this by passing "--perl x.y.z" to "conda build", but
# there's currently a bug that causes "conda build" to parse multi-digit
# numbers in Perl version strings incorrectly; for details, see:
# https://github.com/conda/conda-build/issues/696
export CONDA_PERL="5.22.0"


export BB_MAKE_JOBS BB_ARCH_FLAGS BB_OPT_FLAGS BB_GCC_IS_GNU
