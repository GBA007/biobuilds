#!/bin/bash

basedir=$(cd "`dirname ${BASH_SOURCE[0]}`" && pwd)

HOST_ARCH=`uname -m`

shell=0
img=
build_pkgs=
build_opts=
make_jobs=

use_pkg_cache=1

dry_run=
use_opt_selector=0  # True if >=1 recipes use the [opt] selector
need_opt_image=0    # True if >=1 recipes need vendor toolchains

# Always allocate a pseudo-TTY in (-t) and attach STDIN to (-i) the container;
# if we don't, conda build messages (particularly in the test phase) can
# disappear into the void, which making debugging recipes difficult.
docker_opts="-t -i"

abort() {
    msg=${1:-"Unknown error"}
    echo "ERROR: $msg" >&2
    exit 1
}

# Process command line arguments
while [ "$1" != "" ]; do
    case "$1" in
        "--dry-run")
            dry_run=echo
            ;;
        "--img")
            shift; img="$1"
            ;;
        "--img="*)
            img="${1#*=}"
            ;;
        "--src" | "--source")
            shift; basedir="$1"
            ;;
        "--src="* | "--source="*)
            basedir="${1#*=}"
            ;;
        "--shell")
            shell=1
            ;;
        "-j" | "--jobs")
            shift; make_jobs="$1"
            ;;
        "-j"*)
            make_jobs="${1:2}"
            ;;
        "--jobs="*)
            make_jobs="${1#*=}"
            [[ -z "$make_jobs" ]] && abort "'--jobs' must have non-empty value"
            ;;
        "--no-pkg-cache")
            use_pkg_cache=0
            ;;
        "-o" | "--opt")
            echo "*** WARNING: Ignoring deprecated '-o'/'--opt' option. Please update your" >&2
            echo "*** WARNING: recipes to use 'toolchain' conda build variants instead." >&2
            ;;
        "--psxe")
            shift; psxe_root="$1"
            ;;
        "--psxe="*)
            psxe_root="${1#*=}"
            ;;
        # `conda build` options that accept a value
        "-c" | "--channel" | "-m" | "--numpy" | "--perl" | "--python" | "--R")
            build_opts="$build_opts $1"
            shift
            build_opts="$build_opts $1"
            ;;
        # Assume all other optional arguments are meant for `conda build`
        "-"*)
            build_opts="$build_opts $1"
            ;;
        # Assume arguments with no leading "-" are the conda recipes to build
        *)
            pkg="$1"
            pkg_meta="${basedir}/${pkg}/meta.yaml"
            pkg_build_cfg="${basedir}/${pkg}/conda_build_config.yaml"

            # Make sure this argument actually looks like a conda recipe
            [ -f "${pkg_meta}" ] || \
                abort "No conda recipe found in '${basedir}/${pkg}'!"

            # Check if the recipe uses the '[opt]' selector
            grep -q '\[opt\]' "${pkg_meta}" && use_opt_selector=1

            # Recipe uses build variants (conda-build 3.0 and later)
            if [ -f "${pkg_build_cfg}" ]; then
                # Assume 'toolchain' variants need vendor toolchains
                grep -q '^toolchain' "${pkg_build_cfg}" && \
                    need_opt_image=1
            fi

            build_pkgs="$build_pkgs $1"
            ;;
    esac
    shift
done


# Use the default image if "--img" option was not provided.
if [[ -z "$img" ]]; then
    case "${HOST_ARCH}" in
        "ppc64le")
            [ ${need_opt_image} -eq 1 ] && tag="at10.0" || tag="latest"
            ;;
        *)
            tag="latest"
            ;;
    esac
    img="biobuilds/build-${HOST_ARCH}:${tag}"
fi


# Mount the host's Intel Parallel Studio XE install directory as a volume in
# the build container. This simplifies license management and allows us to use
# the "standard" (i.e., publicly-distributed) x86_64 build image for building
# "linux-64" packages with the "opt" feature enabled. (The alternative would be
# to install Parallel Studio inside a Docker image, but that approach would
# make the image [1] several gigabytes larger and [2] not re-distributable due
# to license management issues.)
if [[ "$HOST_ARCH" == 'x86_64' && ${need_opt_image} -eq 1 ]]; then
    # Standard install location if the "--psxe" argument was not provided
    : ${psxe_root:=/opt/intel}

    # Make sure there's at least something resembling a Parallel Studio install
    # in the directory
    test -e "${psxe_root}/bin/compilervars.sh" || \
        abort "No Intel Parallel Studio installation found in '$psxe_root'!"

    docker_opts="$docker_opts -v ${psxe_root}:/opt/intel:ro"
    docker_opts="$docker_opts -e PSXE_ROOT=/opt/intel"
fi


# Check for cache directory containing packages from "defaults" and other
# channels that may be needed for the build process. This saves us the trouble
# of having to repeatedly download packages when using the build container.
PKG_CACHE_BASE="conda-bld/pkg_cache"
if [ "$HOST_ARCH" == 'x86_64' ]; then
    PKG_CACHE_DIR="${basedir}/${PKG_CACHE_BASE}/linux-64"
elif [ "$HOST_ARCH" == 'ppc64le' ]; then
    PKG_CACHE_DIR="${basedir}/${PKG_CACHE_BASE}/linux-ppc64le"
fi
if [[ "$use_pkg_cache" -eq 1 && \
        -f "${PKG_CACHE_DIR}/.index.json" && \
        -f "${PKG_CACHE_DIR}/repodata.json" ]]; then
    build_opts="$build_opts -c file:///src/${PKG_CACHE_BASE}"
fi


# Sanity check arguments
[[ -z "$make_jobs" ]] || [[ "$make_jobs" -gt 0 ]] || \
    abort "value for '-j'/'--jobs' must be integer > 0"

if [[ $shell -ne 0 ]]; then
    build_opts="--shell"
    build_pkgs=
elif [[ -z "$build_pkgs" ]]; then
    abort "must specify at least one package to build!"
fi


#------------------------------------------------------------------------------
# Launch the build container.
#
# - Set the MAKE_JOBS environment variable so users can control the number of
#   CPUs used when building recipes that use the "biobuilds-build" package to
#   configure their build environment.
#
# - WARNING: This script no longer supports building "legacy" recipes that use
#   $BB_* environment variables rather than the "biobuilds-build" package to
#   configure their toolchain options (i.e., compiler and linker flags).
#------------------------------------------------------------------------------
echo "Launching image '$img'..." >&2
$dry_run \
docker run --rm \
    -e MAKE_JOBS=${make_jobs} \
    -v "${basedir}:/src" \
    $docker_opts \
    "$img" $build_opts $build_pkgs
