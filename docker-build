#!/bin/bash

basedir=$(cd "`dirname ${BASH_SOURCE[0]}`" && pwd)

shell=0
img=
build_pkgs=
build_opts=
make_jobs=
FEATURE_OPT=0

# Always allocate a pseudo-TTY in (-t) and attach STDIN to (-i) the container;
# if we don't, conda build messages (particularly in the test phase) can
# disappear into the void, which making debugging recipes difficult.
docker_opts="-t -i"

abort() {
    msg=${1:-"Unknown error"}
    echo "ERROR: $msg" >&2
    exit 1
}

if [[ -z "$BB_BUILD_IMAGE" ]]; then
    case `uname -m` in
        x86_64)  img="lab7io/build:biobuilds" ;;
        ppc64le) img="lab7io/build:biobuilds-ppc64le" ;;
        *) abort 'No default build image for this architecture' ;;
    esac
else
    img="${BB_BUILD_IMAGE}"
fi

# Process command line arguments
while [ "$1" != "" ]; do
    case "$1" in
        "--img")
            shift; img="$1"
            ;;
        "--img="*)
            img="${1#*=}"
            ;;
        "--src" | "--source")
            shift; basedir="$1"
            ;;
        "--src="* | "--source="*)
            basedir="${1#*=}"
            ;;
        "--shell")
            shell=1
            ;;
        "-j" | "--jobs")
            shift; make_jobs="$1"
            ;;
        "-j"*)
            make_jobs="${1:2}"
            ;;
        "--jobs="*)
            make_jobs="${1#*=}"
            [[ -z "$make_jobs" ]] && abort "'--jobs' must have non-empty value"
            ;;
        "-o" | "--opt")
            FEATURE_OPT=1
            ;;
        "-c" | "--channel" | "--python" | "--numpy" | "--perl" | "--R")
            # conda options that take an additional argument
            build_opts="$build_opts $1"
            shift
            build_opts="$build_opts $1"
            ;;
        "-"*)
            build_opts="$build_opts $1"
            ;;
        *)
            build_pkgs="$build_pkgs $1"
            ;;
    esac
    shift
done

# Check for cache directory containing packages from "defaults" and other
# channels that may be needed for the build process. This saves us the trouble
# of having to repeatedly download packages when using the build container.
HOST_ARCH=`uname -m`
PKG_CACHE_BASE="conda-bld/pkg_cache"
if [ "$HOST_ARCH" == 'x86_64' ]; then
    PKG_CACHE_DIR="${basedir}/${PKG_CACHE_BASE}/linux-64"
elif [ "$HOST_ARCH" == 'ppc64le' ]; then
    PKG_CACHE_DIR="${basedir}/${PKG_CACHE_BASE}/linux-ppc64le"
fi
if [[ -f "${PKG_CACHE_DIR}/.index.json" && \
        -f "${PKG_CACHE_DIR}/repodata.json" ]]; then
    build_opts="$build_opts -c file:///src/${PKG_CACHE_BASE}"
fi

# Sanity check arguments
if [[ ! -z "$make_jobs" ]]; then
    [[ "$make_jobs" -gt 0 ]] || \
        abort "value for '-j'/'--jobs' must be integer > 0"
    BB_MAKE_JOBS=${make_jobs}
fi
if [ $shell -eq 0 ]; then
    [ "x$build_pkgs" == "x" ] && \
        abort "must specify at least one package to build!"
    for pkg in $build_pkgs; do
        [ -f "${basedir}/${pkg}/meta.yaml" ] || \
            abort "No conda recipe found in '${basedir}/${pkg}'!"
    done
else
    build_opts="--shell"
    build_pkgs=
fi

#------------------------------------------------------------------------------
# Launch the build container.
#
# - Set the MAKE_JOBS environment variable so users can control the number of
#   CPUs used when building recipes that use the "biobuilds-build" package to
#   configure their build environment.
#
# - Pass the $BB_* environment variables to provide some level of backwards
#   compatibility with legacy recipes that do not configure their build
#   environment using the "biobuilds-build" package. Note that as of the
#   2017.05 release, the build container's ENTRYPOINT script no longer sources
#   "bb-build-flags.env"; to rebuild older recipes using the standard set of
#   build flags, you will have to do one of the following:
#
#     - "Manually" set and export $BB_ARCH_FLAGS and $BB_OPT_FLAGS;
#     - Source the environment script _before_ running "docker-build"; or
#     - Build using an older (pre-2017.05) image using either the "--img"
#       option or the $BB_BUILD_IMAGE environment variable.
#
#------------------------------------------------------------------------------
echo "Launching image '$img'..." >&2
docker run --rm \
    -e MAKE_JOBS=${make_jobs} \
    -e FEATURE_OPT=${FEATURE_OPT} \
    -e BB_MAKE_JOBS=${BB_MAKE_JOBS:-1} \
    -e BB_ARCH_FLAGS="${BB_ARCH_FLAGS:-}" \
    -e BB_OPT_FLAGS="${BB_OPT_FLAGS:-}" \
    -v "${basedir}:/src" \
    $docker_opts \
    "$img" $build_opts $build_pkgs
