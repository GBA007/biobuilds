commit f127e1f8753818d13c31a2d235b5b9e92b8228e8
Author: Cheng H. Lee <cheng.lee@lab7.io>
Date:   Sun Nov 13 12:22:38 2016 -0600

    ppc64le-folly.patch
    
    Added POWER8 support to the folly headers by backporting commit 80c7ef0
    ("Port Folly to PPC64") from <https://github.com/facebook/folly.git>.
    
    NOTE: The changes made to MicroSpinLock require the compiler support for
    C++11, which is required by SPAdes anyways.

--- ext/include/folly/PackedSyncPtr.h
+++ ext/include/folly/PackedSyncPtr.h
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014 Facebook, Inc.
+ * Copyright 2015 Facebook, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,8 +17,8 @@
 #ifndef FOLLY_PACKEDSYNCPTR_H_
 #define FOLLY_PACKEDSYNCPTR_H_
 
-#ifndef __x86_64__
-# error "PackedSyncPtr is x64-specific code."
+#if !defined(__x86_64__) && !defined(__powerpc64__)
+# error "PackedSyncPtr is x86_64- and ppc64-specific code."
 #endif
 
 /*
--- ext/include/folly/Portability.h
+++ ext/include/folly/Portability.h
@@ -24,4 +24,14 @@
 # error Cannot define MaxAlign on this platform
 #endif
 
+inline void asm_volatile_pause() {
+#if defined (__x86_64__)
+    asm volatile ("pause");
+#elif defined(__powerpc64__)
+    asm volatile("or 27,27,27");
+#else
+#error "asm_volatile_pause() is x86_64- and ppc64-specific code."
+#endif
+}
+
 #endif
--- ext/include/folly/SmallLocks.h
+++ ext/include/folly/SmallLocks.h
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014 Facebook, Inc.
+ * Copyright 2015 Facebook, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -41,9 +41,10 @@
 #include <cstdlib>
 #include <pthread.h>
 #include <mutex>
+#include <atomic>
 
-#ifndef __x86_64__
-# error "SmallLocks.h is currently x64-only."
+#if !defined(__x86_64__) && !defined(__powerpc64__)
+# error "SmallLocks.h is x64 and ppc64 specific code."
 #endif
 
 #include "folly/Portability.h"
@@ -69,7 +70,7 @@
     void wait() {
       if (spinCount < kMaxActiveSpin) {
         ++spinCount;
-        asm volatile("pause");
+        asm_volatile_pause();
       } else {
         /*
          * Always sleep 0.5ms, assuming this will make the kernel put
@@ -100,29 +101,13 @@
  */
 struct MicroSpinLock {
   enum { FREE = 0, LOCKED = 1 };
+  // lock_ can't be std::atomic<> to preserve POD-ness.
   uint8_t lock_;
 
-  /*
-   * Atomically move lock_ from "compare" to "newval". Return boolean
-   * success. Do not play on or around.
-   */
-  bool cas(uint8_t compare, uint8_t newVal) {
-    bool out;
-    bool memVal; // only set if the cmpxchg fails
-    asm volatile("lock; cmpxchgb %[newVal], (%[lockPtr]);"
-                 "setz %[output];"
-                 : [output] "=r" (out), "=a" (memVal)
-                 : "a" (compare), // cmpxchgb constrains this to be in %al
-                   [newVal] "q" (newVal),  // Needs to be byte-accessible
-                   [lockPtr] "r" (&lock_)
-                 : "memory", "flags");
-    return out;
-  }
-
   // Initialize this MSL.  It is unnecessary to call this if you
   // zero-initialize the MicroSpinLock.
   void init() {
-    lock_ = FREE;
+    payload()->store(FREE);
   }
 
   bool try_lock() {
@@ -132,16 +117,25 @@
   void lock() {
     detail::Sleeper sleeper;
     do {
-      while (lock_ != FREE) {
-        asm volatile("" : : : "memory");
+      while (payload()->load() != FREE) {
         sleeper.wait();
       }
     } while (!try_lock());
   }
 
   void unlock() {
-    asm volatile("" : : : "memory");
-    lock_ = FREE; // release barrier on x86
+    payload()->store(FREE, std::memory_order_release);
+  }
+
+ private:
+  std::atomic<uint8_t>* payload() {
+    return reinterpret_cast<std::atomic<uint8_t>*>(&this->lock_);
+  }
+
+  bool cas(uint8_t compare, uint8_t newVal) {
+    return std::atomic_compare_exchange_strong_explicit(payload(), &compare, newVal,
+                                                        std::memory_order_acquire,
+                                                        std::memory_order_relaxed);
   }
 };
 
@@ -217,6 +211,7 @@
   bool try_lock() const {
     bool ret = false;
 
+#if defined(__x86_64__)
 #define FB_DOBTS(size)                                  \
   asm volatile("lock; bts" #size " %1, (%2); setnc %0"  \
                : "=r" (ret)                             \
@@ -231,6 +226,35 @@
     }
 
 #undef FB_DOBTS
+#elif defined(__powerpc64__)
+#define FB_DOBTS(size)                                 \
+    asm volatile("\teieio\n"                           \
+                 "\tl" #size "arx 14,0,%[lockPtr]\n"   \
+                 "\tli 15,1\n"                         \
+                 "\tsldi 15,15,%[bit]\n"               \
+                 "\tand. 16,15,14\n"                   \
+                 "\tbne 0f\n"                          \
+                 "\tor 14,14,15\n"                     \
+                 "\tst" #size "cx. 14,0,%[lockPtr]\n"  \
+                 "\tbne 0f\n"                          \
+                 "\tori %[output],%[output],1\n"       \
+                 "\tisync\n"                           \
+                 "0:\n"                                \
+                 : [output] "+r" (ret)                 \
+                 : [lockPtr] "r"(&lock_),              \
+                   [bit] "i" (Bit)                     \
+                 : "cr0", "memory", "r14", "r15", "r16")
+
+    switch (sizeof(IntType)) {
+    case 2: FB_DOBTS(h); break;
+    case 4: FB_DOBTS(w); break;
+    case 8: FB_DOBTS(d); break;
+    }
+
+#undef FB_DOBTS
+#else
+#error "x86_64 or ppc64 only"
+#endif
 
     return ret;
   }
@@ -250,6 +274,7 @@
    * integer.
    */
   void unlock() const {
+#if defined(__x86_64__)
 #define FB_DOBTR(size)                          \
   asm volatile("lock; btr" #size " %0, (%1)"    \
                :                                \
@@ -267,6 +292,31 @@
     }
 
 #undef FB_DOBTR
+#elif defined(__powerpc64__)
+#define FB_DOBTR(size)                                 \
+    asm volatile("\teieio\n"                           \
+                 "0:  l" #size "arx 14,0,%[lockPtr]\n" \
+                 "\tli 15,1\n"                         \
+                 "\tsldi 15,15,%[bit]\n"               \
+                 "\txor 14,14,15\n"                    \
+                 "\tst" #size "cx. 14,0,%[lockPtr]\n"  \
+                 "\tbne 0b\n"                          \
+                 "\tisync\n"                           \
+                 :                                     \
+                 : [lockPtr] "r"(&lock_),              \
+                   [bit] "i" (Bit)                     \
+                 : "cr0", "memory", "r14", "r15")
+
+    switch (sizeof(IntType)) {
+    case 2: FB_DOBTR(h); break;
+    case 4: FB_DOBTR(w); break;
+    case 8: FB_DOBTR(d); break;
+    }
+
+#undef FB_DOBTR
+#else
+#error "x86_64 or ppc64 only"
+#endif
   }
 };
 
