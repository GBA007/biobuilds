#!/bin/bash

set -e
set -o pipefail

build_os=$(uname -s)

# Pull in the common BioBuilds build flags
BUILD_ENV="${PREFIX}/share/biobuilds-build/build.env"
if [[ ! -f "${BUILD_ENV}" ]]; then
    echo "FATAL: Could not find build environment configuration script!" >&2
    exit 1
fi
source "${BUILD_ENV}" -v

[ $MAKE_JOBS -gt 64 ] && MAKE_JOBS=64
[ -d "${PREFIX}/bin" ] || mkdir -vp "${PREFIX}/bin"
[ -d "${PREFIX}/lib" ] || mkdir -vp "${PREFIX}/lib"

if [ "$build_os" == 'Darwin' ]; then
    toolset=clang

    MACOSX_VERSION_MIN="10.8"
    CXXFLAGS="${CXXFLAGS} -mmacosx-version-min=${MACOSX_VERSION_MIN}"
    LDFLAGS="${LDFLAGS} -mmacosx-version-min=${MACOSX_VERSION_MIN}"

    # Using libc++ instead of libstdc++ to make our Boost package usable with
    # C++11 applications (see comments in "boost/1.60.build.sh" for details).
    CXXFLAGS="${CXXFLAGS} -stdlib=libc++"
    LDFLAGS="${LDFLAGS} -stdlib=libc++"
elif [ "$build_os" == 'Linux' ]; then
    toolset=gcc
else
    echo "Cannot build Boost on unsupported OS '$build_os'" >&2
    exit 1
fi

# NOTE: don't tee to "bootstrap.log" below as it's generated by bootstrap.sh
./bootstrap.sh --prefix="${PREFIX}" --libdir="${PREFIX}/lib" \
    --with-toolset="${toolset}" \
    --with-icu="${PREFIX}" \
    --with-python="${PYTHON}" \
    --with-python-root="${PREFIX}" \
    --without-libraries=graph_parallel,mpi \
    2>&1 | tee config.log

./b2 -q \
    variant=release \
    debug-symbols=off \
    link=shared \
    runtime-link=shared \
    address-model=64 \
    threading=multi \
    toolset=${toolset} \
    include="${PREFIX}/include" \
    cflags="$CFLAGS" \
    cxxflags="$CXXFLAGS" \
    linkflags="$LDFLAGS" \
    -j${MAKE_JOBS} \
    install 2>&1 | tee build.log
