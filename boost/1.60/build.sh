#!/bin/bash

set -e -x
set -o pipefail

build_os=$(uname -s)

[ "$BB_ARCH_FLAGS" == "<UNDEFINED>" ] && BB_ARCH_FLAGS=
[ "$BB_OPT_FLAGS" == "<UNDEFINED>" ] && BB_OPT_FLAGS=
[ "$BB_MAKE_JOBS" == "<UNDEFINED>" ] && BB_MAKE_JOBS=1
CFLAGS="${CFLAGS} ${BB_ARCH_FLAGS} ${BB_OPT_FLAGS}"
CXXFLAGS="${CFLAGS}"
LDFLAGS="${LDFLAGS} -L${PREFIX}/lib"


[ $BB_MAKE_JOBS -gt 64 ] && BB_MAKE_JOBS=64
[ -d "${PREFIX}/bin" ] || mkdir -vp "${PREFIX}/bin"
[ -d "${PREFIX}/lib" ] || mkdir -vp "${PREFIX}/lib"

if [ "$build_os" == 'Darwin' ]; then
    toolset=clang

    MACOSX_VERSION_MIN="10.8"
    CXXFLAGS="${CXXFLAGS} -mmacosx-version-min=${MACOSX_VERSION_MIN}"
    LDFLAGS="${LDFLAGS} -mmacosx-version-min=${MACOSX_VERSION_MIN}"

    # Linking to libstdc++ instead of libc++ to maintain compatibility with the
    # Boost libraries available from conda's "defaults" channel.
    CXXFLAGS="${CXXFLAGS} -stdlib=libstdc++"
    LDFLAGS="${LDFLAGS} -stdlib=libstdc++"
    #LDFLAGS="${LDFLAGS} -v -Wl,-warn_commons -Wl,-warn_weak_exports"
elif [ "$build_os" == 'Linux' ]; then
    toolset=gcc
else
    echo "Cannot build Boost on unsupported OS '$build_os'" >&2
    exit 1
fi

# NOTE: don't tee to "bootstrap.log" below as it's generated by bootstrap.sh
./bootstrap.sh --prefix="${PREFIX}" --libdir="${PREFIX}/lib" \
    --with-toolset="${toolset}" \
    --with-icu="${PREFIX}" \
    --with-python="${PYTHON}" \
    --with-python-root="${PREFIX}" \
    --without-libraries=graph_parallel,mpi \
    2>&1 | tee config.log

./b2 -q -d+2 \
    variant=release \
    debug-symbols=off \
    link=shared \
    runtime-link=shared \
    address-model=64 \
    threading=multi \
    toolset=${toolset} \
    include="${PREFIX}/include" \
    cflags="$CFLAGS" \
    cxxflags="$CXXFLAGS" \
    linkflags="$LDFLAGS" \
    -j${BB_MAKE_JOBS} \
    install 2>&1 | tee build.log
