#!/bin/bash

set -e -x
set -o pipefail

build_os=$(uname -s)

[ "$BB_ARCH_FLAGS" == "<UNDEFINED>" ] && BB_ARCH_FLAGS=
[ "$BB_OPT_FLAGS" == "<UNDEFINED>" ] && BB_OPT_FLAGS=
[ "$BB_MAKE_JOBS" == "<UNDEFINED>" ] && BB_MAKE_JOBS=1
CFLAGS="${CFLAGS} ${BB_ARCH_FLAGS} ${BB_OPT_FLAGS}"
CXXFLAGS="${CFLAGS}"
LDFLAGS="${LDFLAGS} -L${PREFIX}/lib"


[ $BB_MAKE_JOBS -gt 64 ] && BB_MAKE_JOBS=64
[ -d "${PREFIX}/bin" ] || mkdir -vp "${PREFIX}/bin"
[ -d "${PREFIX}/lib" ] || mkdir -vp "${PREFIX}/lib"

if [ "$build_os" == 'Darwin' ]; then
    toolset=clang

    MACOSX_VERSION_MIN="10.8"
    CXXFLAGS="${CXXFLAGS} -mmacosx-version-min=${MACOSX_VERSION_MIN}"
    LDFLAGS="${LDFLAGS} -mmacosx-version-min=${MACOSX_VERSION_MIN}"

    #--------------------------------------------------------------------------
    # WARNING: linking to "libc++" instead of "libstdc++" breaks compatibility
    # with the "defaults" channel's Boost package. However, we have various
    # package that need both C++11 support and Boost (e.g., sailfish & salmon).
    #
    # We *can't* use the "gcc" conda package to get C++11 support while still
    # using Boost libraries linked OS X's libstdc++, since gcc's and OS X's
    # libstdc++ are *NOT* ABI-comptible. Mixing the two can lead to various
    # runtime errors, like "pointer being freed was not allocated" or segfaults
    # when using "boost::program_options::positional_options_description".
    #
    # Given that, we must use clang++ to build Boost-using C++11 applications
    # on OS X, and to do *that*, we need to link Boost to libc++ (as OS X's
    # libstdc++ does not support all C++11 features).
    #--------------------------------------------------------------------------
    CXXFLAGS="${CXXFLAGS} -stdlib=libc++"
    LDFLAGS="${LDFLAGS} -stdlib=libc++"
elif [ "$build_os" == 'Linux' ]; then
    toolset=gcc
else
    echo "Cannot build Boost on unsupported OS '$build_os'" >&2
    exit 1
fi

# NOTE: don't tee to "bootstrap.log" below as it's generated by bootstrap.sh
./bootstrap.sh --prefix="${PREFIX}" --libdir="${PREFIX}/lib" \
    --with-toolset="${toolset}" \
    --with-icu="${PREFIX}" \
    --with-python="${PYTHON}" \
    --with-python-root="${PREFIX}" \
    --without-libraries=graph_parallel,mpi \
    2>&1 | tee config.log

./b2 -q -d+2 \
    variant=release \
    debug-symbols=off \
    link=shared \
    runtime-link=shared \
    address-model=64 \
    threading=multi \
    toolset=${toolset} \
    include="${PREFIX}/include" \
    cflags="$CFLAGS" \
    cxxflags="$CXXFLAGS" \
    linkflags="$LDFLAGS" \
    -j${BB_MAKE_JOBS} \
    install 2>&1 | tee build.log
