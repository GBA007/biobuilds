--- CMakeLists.txt
+++ CMakeLists.txt
@@ -20,14 +20,29 @@
 
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
 
+# Test for the CPU architecture; use `uname` instead of relying on what cmake
+# reports as the CMAKE_SYSTEM_PROCESSOR variable due to OS X weirdness, which
+# always reports that variable as "i386", even on 64-bit Intel (x86_64) CPUs.
+execute_process(COMMAND uname -m
+                OUTPUT_VARIABLE HOST_ARCH
+                OUTPUT_STRIP_TRAILING_WHITESPACE)
+
 set (WARNING_IGNORE_FLAGS "-Wno-deprecated-register")
 set (BOOST_CXX_FLAGS "-Wno-deprecated-register -std=c++11")
 ## Prefer static to dynamic libraries
 SET(CMAKE_FIND_LIBRARY_SUFFIXES .a ${CMAKE_FIND_LIBRARY_SUFFIXES})
 
+# Make sure the compilers make the same assumption about plain "char"
+# declaractions (i.e., those without "signed" or "unsigned") on all platforms;
+# GCC on x86_64 assumes signed chars, so we'll just go ahead and use that.
+set (COMMON_C_FLAGS   "${COMMON_C_FLAGS} -fsigned-char")
+set (COMMON_CXX_FLAGS "${COMMON_CXX_FLAGS} -fsigned-char")
+
 ## Set the standard required compile flags
 # Nov 18th --- removed -DHAVE_CONFIG_H
-set (CMAKE_CXX_FLAGS "-pthread -ftree-vectorize -funroll-loops -fPIC -fomit-frame-pointer -Ofast -DRAPMAP_SALMON_SUPPORT -DHAVE_ANSI_TERM -DHAVE_SSTREAM -Wall -Wno-unknown-pragmas -Wno-reorder -Wno-unused-variable -std=c++11 -Wreturn-type -Werror=return-type")
+set (CMAKE_C_FLAGS "${COMMON_C_FLAGS} -fPIC -DRAPMAP_SALMON_SUPPORT -DHAVE_ANSI_TERM -DHAVE_SSTREAM -Wall")
+set (CMAKE_CXX_FLAGS "${COMMON_CXX_FLAGS} -pthread -fPIC -fomit-frame-pointer -Ofast -DRAPMAP_SALMON_SUPPORT -DHAVE_ANSI_TERM -DHAVE_SSTREAM -Wall -Wno-unknown-pragmas -Wno-reorder -Wno-unused-variable -std=c++11 -Wreturn-type -Werror=return-type")
+set (CMAKE_LD_FLAGS "${COMMON_LD_FLAGS}")
 
 ##
 # OSX is strange (some might say, stupid in this regard).  Deal with it's quirkines here.
@@ -240,6 +255,9 @@
     UPDATE_COMMAND sh -c "mkdir -p <SOURCE_DIR>/build"
     BINARY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/libdivsufsort-master/build
     CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR> -DBUILD_DIVSUFSORT64=TRUE -DUSE_OPENMP=TRUE -DBUILD_SHARED_LIBS=FALSE
+               -DCMAKE_VERBOSE_MAKEFILE=TRUE
+               -DCMAKE_C_FLAGS=${COMMON_C_FLAGS}
+               -DCMAKE_CXX_FLAGS=${COMMON_CXX_FLAGS}
 )
 set(SUFFARRAY_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/external/install/include)
 
@@ -269,8 +287,9 @@
                      tar -xzvf bwa-master.tar.gz --strip-components=1 -C bwa-master
     SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/bwa-master
     INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/install
+    PATCH_COMMAND test -f ${CMAKE_CURRENT_SOURCE_DIR}/bwa.patch && patch -p0 < ${CMAKE_CURRENT_SOURCE_DIR}/bwa.patch
     CONFIGURE_COMMAND ""
-    BUILD_COMMAND sh -c "make CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}"
+    BUILD_COMMAND sh -c "make LDFLAGS='${CMAKE_LD_FLAGS}' CC=${CMAKE_C_COMPILER} CFLAGS='${CMAKE_C_FLAGS}' CXX=${CMAKE_CXX_COMPILER}"
     INSTALL_COMMAND sh -c "mkdir -p <INSTALL_DIR>/lib && mkdir -p <INSTALL_DIR>/include/bwa && cp libbwa.a <INSTALL_DIR>/lib && cp *.h <INSTALL_DIR>/include/bwa && cp is.c bwtindex.c bwt_gen.c QSufSort.c ${CMAKE_CURRENT_SOURCE_DIR}/src/"
     BUILD_IN_SOURCE TRUE
 )
@@ -280,6 +299,13 @@
 if (NOT JELLYFISH_FOUND)
 message("Build system will fetch and build Jellyfish")
 message("==================================================================")
+if( ${HOST_ARCH} STREQUAL "x86_64" )
+    set(JELLYFISH_SSE_OPTION    --with-sse)
+else ()
+    set(JELLYFISH_SSE_OPTION    --without-sse)
+endif ()
+set(JELLYFISH_CXX_FLAGS     "${COMMON_CXX_FLAGS} ${JELLYFISH_CXX_FLAGS}")
+
 ExternalProject_Add(libjellyfish
     DOWNLOAD_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external
     DOWNLOAD_COMMAND test -f jellyfish-2.2.6.tgz || curl -k -L https://github.com/gmarcais/Jellyfish/releases/download/v2.2.6/jellyfish-2.2.6.tar.gz -o jellyfish-2.2.6.tgz &&
@@ -287,8 +313,8 @@
      	tar -xzvf jellyfish-2.2.6.tgz
     SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/jellyfish-2.2.6
     INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/install
-    CONFIGURE_COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/external/jellyfish-2.2.6/configure --prefix=<INSTALL_DIR> CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} CXXFLAGS=${JELLYFISH_CXX_FLAGS}
-    BUILD_COMMAND ${MAKE} CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} CXXFLAGS=${JELLYFISH_CXX_FLAGS}
+    CONFIGURE_COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/external/jellyfish-2.2.6/configure --prefix=<INSTALL_DIR> CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} CXXFLAGS=${JELLYFISH_CXX_FLAGS} ${JELLYFISH_SSE_OPTION}
+    BUILD_COMMAND make CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} CXXFLAGS=${JELLYFISH_CXX_FLAGS} V=1
     BUILD_IN_SOURCE 1
     INSTALL_COMMAND make install
 )
@@ -320,6 +346,9 @@
     INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/install
     BINARY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/libgff/build
     CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_SOURCE_DIR}/external/install
+               -DCMAKE_VERBOSE_MAKEFILE=TRUE
+               -DCMAKE_C_FLAGS=${COMMON_C_FLAGS}
+               -DCMAKE_CXX_FLAGS=${COMMON_CXX_FLAGS}
 )
 
 # Because of the way that Apple has changed SIP 
@@ -332,6 +361,8 @@
 
 message("Build system will compile Staden IOLib")
 message("==================================================================")
+set(LIBSTADEN_CFLAGS    "${COMMON_C_FLAGS} ${LIBSTADEN_CFLAGS}")
+set(LIBSTADEN_LDFLAGS   "${COMMON_LD_FLAGS} ${LIBSTADEN_LDFLAGS}")
 ExternalProject_Add(libstadenio
     DOWNLOAD_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external
     DOWNLOAD_COMMAND test -f staden-io_lib-v1.14.8.tar.gz || curl -k -L https://github.com/COMBINE-lab/staden-io_lib/archive/v1.14.8.tar.gz -o staden-io_lib-v1.14.8.tar.gz &&
@@ -341,8 +372,9 @@
                      mv -f staden-io_lib-1.14.8 staden-io_lib
     SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/staden-io_lib
     INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/install
-    CONFIGURE_COMMAND ./configure --enable-shared=no --without-libcurl --prefix=<INSTALL_DIR> LDFLAGS=${LIBSTADEN_LDFLAGS} CFLAGS=${LIBSTADEN_CFLAGS} CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}
-    BUILD_COMMAND make CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} CFLAGS+=${STADEN_INC} CFLAGS+=${STADEN_LIB}
+    CONFIGURE_COMMAND env LDFLAGS=${LIBSTADEN_LDFLAGS} CFLAGS=${LIBSTADEN_CFLAGS} CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}
+                      ./configure --enable-shared=no --without-libcurl --prefix=<INSTALL_DIR>
+    BUILD_COMMAND make CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}
 
     BUILD_IN_SOURCE 1
     INSTALL_COMMAND make install
@@ -403,7 +435,9 @@
     SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/sparsehash-sparsehash-2.0.2
     BUILD_IN_SOURCE TRUE
     INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/install
-    CONFIGURE_COMMAND sh -c "CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} ./configure --prefix=<INSTALL_DIR>"
+    CONFIGURE_COMMAND env CC=${CMAKE_C_COMPILER} CFLAGS=${COMMON_C_FLAGS}
+                          CXX=${CMAKE_CXX_COMPILER} CXXFLAGS=${COMMON_CXX_FLAGS}
+                          ./configure --prefix=<INSTALL_DIR>
     INSTALL_COMMAND make install
 )
 
