--- CMakeLists.txt
+++ CMakeLists.txt
@@ -176,7 +176,7 @@
 ##
 # We want static, multithreaded boost libraries
 ##
-set (Boost_USE_STATIC_LIBS ON)
+set (Boost_USE_STATIC_LIBS OFF)
 set (Boost_USE_MULTITHREADED ON)
 #set (Boost_USE_STATIC_RUNTIME OFF)
 
@@ -236,100 +236,27 @@
 ##
 # Set the latest version and look for what we need
 ##
-set(Boost_ADDITIONAL_VERSIONS "1.53" "1.53.0" "1.54" "1.55" "1.56" "1.57.0" "1.58" "1.59" "1.60" "1.61")
+set(Boost_ADDITIONAL_VERSIONS "1.53" "1.53.0" "1.54" "1.55" "1.56" "1.57.0" "1.58" "1.59" "1.60" "1.61" "1.62")
 find_package(Boost 1.53.0 COMPONENTS iostreams filesystem system thread timer chrono program_options serialization)
 message("BOOST_INCLUDEDIR = ${BOOST_INCLUDEDIR}")
 message("BOOST_LIBRARYDIR = ${BOOST_LIBRARYDIR}")
 message("Boost_FOUND = ${Boost_FOUND}")
 include(ExternalProject)
 
-##
-#  If we had to fetch Boost, the reconfigure step will re-run cmake.  The second configuration
-#  pass is executed with the BOOST_RECONFIGURE flag set. This should allow our newly
-#  installed Boost to be found by CMake.
-##
-if (BOOST_RECONFIGURE)
-    message("Executing Boost Reconfiguration")
-    unset(Boost_FOUND CACHE)
-    unset(Boost_INCLUDE_DIR CACHE)
-    unset(Boost_INCLUDE_DIRS CACHE)
-    unset(Boost_LIBRARY_DIRS CACHE)
-    unset(Boost_LIBRARIES CACHE)
-    unset(BOOST_ROOT CACHE)
-    unset(CMAKE_PREFIX_PATH CACHE)
-
-    set(BOOST_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/external/install)
-    set(CMAKE_PREFIX_PATH ${CMAKE_CURRENT_SOURCE_DIR}/external/install)
-    set(Boost_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/external/install/include)
-    set(Boost_LIBRARY_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/external/install/lib)
-    find_package(Boost 1.53.0 COMPONENTS iostreams filesystem system thread timer chrono program_options REQUIRED)
-    set(FETCH_BOOST FALSE)
-endif()
-
-
-
-##
-# Either inform the user of how to obtain Boost, or, if they passed in the FETCH_BOOST
-# option, go and grab it for them.
-##
-if ((NOT Boost_FOUND) AND (NOT FETCH_BOOST))
+if (NOT Boost_FOUND)
 	message(FATAL_ERROR
         "Salmon cannot be compiled without Boost.\n"
         "It is recommended to visit http://www.boost.org/ and install Boost according to those instructions.\n"
         "This build system can also download and install a local version of boost for you (this takes a lot of time).\n"
         "To fetch and build boost locally, call cmake with -DFETCH_BOOST=TRUE"
     )
-elseif(FETCH_BOOST)
-    ## Let the rest of the build process know we're going to be fetching boost
-    set (BOOST_LIB_SUBSET --with-iostreams --with-atomic --with-chrono --with-container --with-date_time --with-exception
-                          --with-filesystem --with-graph --with-graph_parallel --with-math
-                          --with-program_options --with-system --with-thread
-                          --with-timer)
-    set (BOOST_WILL_RECONFIGURE TRUE)
-    set (FETCH_BOOST FALSE)
-    message("Build system will fetch and build Boost")
-    message("==================================================================")
-    ExternalProject_Add(libboost
-        DOWNLOAD_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external
-        DOWNLOAD_COMMAND curl -k -L  http://downloads.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.gz -o boost_1_59_0.tar.gz &&
-                tar xzf boost_1_59_0.tar.gz
-        #URL http://downloads.sourceforge.net/project/boost/boost/1.57.0/boost_1_57_0.tar.gz
-        SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/boost_1_59_0
-        INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/install
-        #PATCH_COMMAND patch -p2 < ${CMAKE_CURRENT_SOURCE_DIR}/external/boost156.patch
-	CONFIGURE_COMMAND CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} ${CMAKE_CURRENT_SOURCE_DIR}/external/boost_1_59_0/bootstrap.sh ${BOOST_CONFIGURE_TOOLSET} ${BOOST_BUILD_LIBS} --prefix=<INSTALL_DIR>
-	BUILD_COMMAND CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} ${CMAKE_CURRENT_SOURCE_DIR}/external/boost_1_59_0/b2 -d0 -j2 ${BOOST_LIB_SUBSET} toolset=${BOOST_TOOLSET} ${BOOST_EXTRA_FLAGS} cxxflags=${BOOST_CXX_FLAGS} link=static install
-        BUILD_IN_SOURCE 1
-        INSTALL_COMMAND ""
-    )
-
-    ##
-    # After we've installed boost,
-    ##
-    SET( RECONFIG_FLAGS ${RECONFIG_FLAGS} -DBOOST_WILL_RECONFIGURE=FALSE -DBOOST_RECONFIGURE=TRUE -DFETCH_BOOST=FALSE)
-    ExternalProject_Add_Step(libboost reconfigure
-        COMMAND ${CMAKE_COMMAND} ${CMAKE_CURRENT_SOURCE_DIR} ${RECONFIG_FLAGS}
-        DEPENDEES install
-    )
 endif()
 
-##
-# If we're fetching boost and we need to have dummy paths for these variables
-# so that CMake won't complain
-##
-if (BOOST_WILL_RECONFIGURE)
-    message("Setting Temporary Boost paths")
-    set(Boost_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/install/include)
-    set(Boost_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/external/install/include)
-    set(Boost_LIBRARY_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/external/install/lib)
-    set(Boost_FOUND TRUE)
-endif()
-
-
 message("BOOST INCLUDE DIR = ${Boost_INCLUDE_DIR}")
 message("BOOST INCLUDE DIRS = ${Boost_INCLUDE_DIRS}")
 message("BOOST LIB DIR = ${Boost_LIBRARY_DIRS}")
 message("BOOST LIBRARIES = ${Boost_LIBRARIES}")
+message("===========================================")
 
 set(EXTERNAL_LIBRARY_PATH $CMAKE_CURRENT_SOURCE_DIR/lib)
 
