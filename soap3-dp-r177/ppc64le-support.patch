--- 2bwt-flex/LT.c.orig
+++ 2bwt-flex/LT.c
@@ -50,7 +50,7 @@ LT *  LTLoad(const char * fileName)  {
     unsigned step = 1048576;
     unsigned long long i;
     for (i = 0; i < lookupWordSize; i += LOOKUP_LOAD_STEP) {
-        fread(lookupTable->table+i, LOOKUP_LOAD_STEP * sizeof(unsigned int), 1, fin);
+        fread(lookupTable->table+i, sizeof(unsigned int), LOOKUP_LOAD_STEP, fin);
     }
     fclose(fin);
     return lookupTable;
--- 2bwt-flex/SRA2BWTCheckAndExtend.c.orig
+++ 2bwt-flex/SRA2BWTCheckAndExtend.c
@@ -61,7 +61,7 @@ int CEPackPattern(const unsigned char * convertedKey,
                          unsigned long long * packedKey) {
 
     if (len>SRA_MAX_READ_LENGTH) {
-        fprintf(stderr,"[GetPackedPatternLong] Read length longer than the maximum short read length defined.\n");
+        fprintf(stderr,"[CEPackPattern] Read length longer than the maximum short read length defined.\n");
         return 0;
     }
     if (len==0) return 0;
--- 2bwt-lib/BWT.c.orig
+++ 2bwt-lib/BWT.c
@@ -31,8 +31,12 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#ifdef _ARCH_PPC
+#include <altivec.h>
+#else
 #include <emmintrin.h>
 #include <mmintrin.h>
+#endif
 #include <sys/mman.h>
 #include <unistd.h>
 #include "BWT.h"
@@ -45,6 +49,11 @@
 #include "HSP.h"
 #include "HSPstatistic.h"
 
+#ifdef _ARCH_PPC
+#define my_vec_sr(a,b) vec_and(vec_sr(a,(vector unsigned int)vec_splats(b)),(vector unsigned int)vec_cmplt(vec_splats(b),vec_splats(32u)))
+#define my_vec_sl(a,b) vec_and(vec_sl(a,(vector unsigned int)vec_splats(b)),(vector unsigned int)vec_cmplt(vec_splats(b),vec_splats(32u)))
+#endif
+
 // static functions
 static INLINE unsigned int BWTOccValueExplicit(const BWT *bwt, const unsigned int occIndexExplicit, const unsigned int character);
 static INLINE void BWTAllOccValueExplicit(const BWT *bwt, const unsigned int occIndexExplicit, unsigned int* __restrict occValueExplicit);
@@ -122,12 +131,14 @@ BWT *BWTLoad(MMPool *mmPool, const char *bwtCodeFileName, const char *occValueFi
     bwtCodeFile = (FILE*)fopen64(bwtCodeFileName, "rb");
     if (bwtCodeFile == NULL) {
         fprintf(stderr, "BWTLoad() : cannot open bwtCodeFile!\n");
+        perror(0);
         exit(1);
     }
 
     occValueFile = (FILE*)fopen64(occValueFileName, "rb");
     if (occValueFile == NULL) {
         fprintf(stderr, "BWTLoad() : cannot open occValueFile!\n");
+        perror(0);
         exit(1);
     }
 
@@ -135,6 +146,7 @@ BWT *BWTLoad(MMPool *mmPool, const char *bwtCodeFileName, const char *occValueFi
         saValueFile = (FILE*)fopen64(saValueFileName, "rb");
         if (saValueFile == NULL) {
             fprintf(stderr, "BWTLoad() : cannot open saValueFile!\n");
+            perror(0);
             exit(1);
         }
     }
@@ -143,6 +155,7 @@ BWT *BWTLoad(MMPool *mmPool, const char *bwtCodeFileName, const char *occValueFi
         inverseSaFile = (FILE*)fopen64(inverseSaFileName, "rb");
         if (inverseSaFile == NULL) {
             fprintf(stderr, "BWTLoad() : cannot open inverseSaFile!\n");
+            perror(0);
             exit(1);
         }
     }
@@ -151,6 +164,7 @@ BWT *BWTLoad(MMPool *mmPool, const char *bwtCodeFileName, const char *occValueFi
         cachedSaIndexFile = (FILE*)fopen64(cachedSaIndexFileName, "rb");
         if (cachedSaIndexFile == NULL) {
             fprintf(stderr, "BWTLoad() : cannot open cachedSaIndexFile!\n");
+            perror(0);
             exit(1);
         }
     }
@@ -450,12 +464,146 @@ void BWTGenerateSaValueOnBoundary(MMPool *mmPool, BWT *bwt) {
 // index1 and index2 can be on the same aligned 128 bit region or can be on adjacant aligned 128 bit region
 // If index1 and index2 are in the same aligned 128 bit region, one of them must be on the boundary
 // These requirements are to reduce the no. of branches in the program flow
+#ifdef _ARCH_PPC
 
 unsigned int BWTDecode(const BWT *bwt, const unsigned int index1, const unsigned int index2, const unsigned int character) {
 
     unsigned int numChar1, numChar2, minIndex, maxIndex, minIndex128, maxIndex128;
     unsigned int r;
 
+    const static vector unsigned int partitionOne1  = { 47, 31, 15, 0 };
+    const static vector unsigned int partitionOne2  = { 0, 15, 31, 47 };
+    const static vector unsigned int partitionZero1  = { 63, 47, 31, 15 };
+    const static vector unsigned int partitionZero2  = { 15, 31, 47, 63 };
+
+    // vector registers
+    vector unsigned int r1e, r2e;
+    vector unsigned int mcl;
+    vector unsigned int m0, m1;
+    vector unsigned int r1a, r1b, r1c;
+    vector unsigned int r2a, r2b, r2c;
+
+    vector unsigned char sadC,sadD,sadE;
+    vector unsigned int sadF;
+    vector signed int sadG;
+
+    // Sort index1 and index2
+    r = (index1 - index2) & -(index1 < index2);
+    minIndex = index2 + r;
+    maxIndex = index1 - r;
+
+    // Locate 128 bit boundary
+    minIndex128 = lastAlignedBoundary(minIndex, CHAR_PER_128);
+    maxIndex128 = lastAlignedBoundary(maxIndex - (maxIndex - minIndex > CHAR_PER_128), CHAR_PER_128);
+
+    // Determine no.of characters to count
+    numChar1 = maxIndex128 - minIndex;
+    numChar2 = maxIndex - maxIndex128;
+
+    // Load encoding into register here in the hope of hiding some memory latency
+    r1e = *(vector unsigned int *)(bwt->bwtCode + minIndex128 / CHAR_PER_WORD);    // Load encoding into register
+    r2e = *(vector unsigned int *)(bwt->bwtCode + maxIndex128 / CHAR_PER_WORD);    // Load encoding into register
+
+    // Set character extraction masks 
+    m0 = vec_splats(0xFFFFFFFFu + (character & 1));                     // Character selection mask for even bits
+    m1 = vec_splats(0xFFFFFFFFu + (character >> 1));                    // Character selection mask for odd bits
+    mcl = vec_splats(0x55555555u);                                      // Set bit-clearing mask to 0x55555555....(alternate 1-bit)
+
+    // Set counting mask for 2 x 128 bits
+
+    r1a = vec_splats((unsigned int)numChar1);        // Load number of characters into register
+    r2a = vec_splats((unsigned int)numChar2);        // Load number of characters into register
+
+    r1b = partitionOne1;    // Load partition into register
+    r2b = partitionOne2;    // Load partition into register
+
+    r1c = partitionZero1;    // Load partition into register
+    r2c = partitionZero2;    // Load partition into register
+
+    r1b = (vector unsigned int)vec_cmpgt(r1a,r1b);                // Compare to generate 4x32 bit mask; the word with counting boundary is all ones
+    r2b = (vector unsigned int)vec_cmpgt(r2a,r2b);                // Compare to generate 4x32 bit mask; the word with counting boundary is all ones
+ 
+    r1c = (vector unsigned int)vec_cmpgt(r1a,r1c);                // Compare to generate 4x32 bit mask; the word with counting boundary is all zeros
+    r2c = (vector unsigned int)vec_cmpgt(r2a,r2c);                // Compare to generate 4x32 bit mask; the word with counting boundary is all zeros
+
+    r1b = my_vec_sr(r1b,(16u - numChar1 % 16) * 2);    // Shift bits so that all word comform to the requirement of counting the word with counting boundary 
+    r2b = my_vec_sl(r2b,(16u - numChar2 % 16) * 2);    // Shift bits so that all word comform to the requirement of counting the word with counting boundary
+
+    r1c = vec_or(r1b,r1c);    // Combine two masks
+    r2c = vec_or(r2b,r2c);    // Combine two masks
+
+    r1c = vec_and(r1c, mcl);    // Combine with bit-clearing mask (now = 0x55555555....)
+    r2c = vec_and(r2c, mcl);    // Combine with bit-clearing mask (now = 0x55555555....)
+
+    // Start counting; encoding has been loaded into register earlier
+
+    r1b = vec_sr(r1e, vec_splats(1u));    // Shift encoding to right by 1 bit
+    r2b = vec_sr(r2e, vec_splats(1u));    // Shift encoding to right by 1 bit
+
+    r1a = vec_xor(r1e, m0);    // Check even-bits with mask
+    r2a = vec_xor(r2e, m0);    // Check even-bits with mask
+
+    r1b = vec_xor(r1b, m1);    // Check odd-bits with mask
+    r2b = vec_xor(r2b, m1);    // Check odd-bits with mask
+
+    r1a = vec_and(r1a, r1b);    // Combine even and odd bits
+    r2a = vec_and(r2a, r2b);    // Combine even and odd bits
+
+    r1a = vec_and(r1a, r1c);    // Combine with counting mask, which has been combined with bit-clearing mask of 0x55555555.... 
+    r2a = vec_and(r2a, r2c);    // Combine with counting mask, which has been combined with bit-clearing mask of 0x55555555.... 
+
+
+    // Combine 2 x 128 bits and continue counting
+
+#ifdef _ARCH_PPC7
+
+    r1a = vec_add(r1a, r2a);        // Combine 2 x 128 bits by adding them together
+
+    mcl = vec_splats(0x33333333u);    // Set bit-clearing mask to 0x33333333....(alternate 2-bits)
+
+    r1b = vec_sr(r1a, vec_splats(2u));        // Shift intermediate result to right by 2 bit
+    r1a = vec_and(r1a, mcl);        // Clear alternate 2-bits of intermediate result by combining with bit-clearing mask (now = 0x33333333....)
+    r1b = vec_and(r1b, mcl);        // Clear alternate 2-bits of shifted intermediate result by combining with bit-clearing mask (now = 0x33333333....)
+    r1a = vec_add(r1a, r1b);        // Combine shifted and non-shifted intermediate results by adding them together
+
+    mcl = vec_splats(0x0F0F0F0Fu);    // Set bit-clearing mask to 0x0F0F0F0F....(alternate 4-bits)
+    m0 = vec_xor(m0,m0);                // Set an all-zero mask
+
+    r1b = vec_sr(r1a, vec_splats(4u));        // Shift intermediate result to right by 4 bit
+    r1a = vec_add(r1a, r1b);        // Combine shifted and non-shifted intermediate results by adding them together
+    r1a = vec_and(r1a, mcl);        // Clear alternate 4-bits of intermediate result by combining with bit-clearing mask (now = 0xOFOFOFOF....)
+
+    sadC = vec_min((vector unsigned char)r1a,(vector unsigned char)m0);
+    sadD = vec_max((vector unsigned char)r1a,(vector unsigned char)m0);
+    sadE = vec_sub(sadD,sadC);
+    sadF = vec_splats(0u);
+    sadG = vec_splats(0);
+    sadF = vec_sum4s(sadE,sadF);
+    sadG = vec_sums((vector signed int)sadF,sadG);
+
+    return ((signed int*)&sadG)[3];
+#endif
+
+#ifdef _ARCH_PWR8
+#ifdef __GNUC__
+	vector unsigned int a=vec_add(vec_vpopcntw(r1a),vec_vpopcntw(r2a));
+#else
+	vector unsigned int a=vec_add(vec_popcnt(r1a),vec_popcnt(r2a));
+#endif
+    return a[0]+a[1]+a[2]+a[3];
+#endif
+
+}
+#endif
+
+
+
+#ifdef __x86_64
+unsigned int BWTDecode(const BWT *bwt, const unsigned int index1, const unsigned int index2, const unsigned int character) {
+
+    unsigned int numChar1, numChar2, minIndex, maxIndex, minIndex128, maxIndex128;
+    unsigned int r;
+
     const static unsigned int ALIGN_16 partitionOne1[4]  = { 47, 31, 15, 0 };
     const static unsigned int ALIGN_16 partitionOne2[4]  = { 0, 15, 31, 47 };
     const static unsigned int ALIGN_16 partitionZero1[4]  = { 63, 47, 31, 15 };
@@ -601,17 +749,214 @@ unsigned int BWTDecode(const BWT *bwt, const unsigned int index1, const unsigned
     return _mm_extract_epi16(r1a, 0) + _mm_extract_epi16(r1a, 4);    // Extract and return result from register
 
 }
+#endif
 
 // Ordering of index1 and index2 is not important; this module will handle the ordering
 // index1 and index2 can be on the same aligned 128 bit region or can be on adjacant aligned 128 bit region
 // If index1 and index2 are in the same aligned 128 bit region, one of them must be on the boundary
 // These requirements are to reduce the no. of branches in the program flow
+#ifdef _ARCH_PPC
 
 void BWTDecodeAll(const BWT *bwt, const unsigned int index1, const unsigned int index2, unsigned int* __restrict occValue) {
 
     unsigned int numChar1, numChar2, minIndex, maxIndex, minIndex128, maxIndex128;
     unsigned int r;
 
+    const static vector unsigned int partitionOne1  = { 47, 31, 15, 0 };
+    const static vector unsigned int partitionOne2  = { 0, 15, 31, 47 };
+    const static vector unsigned int partitionZero1  = { 63, 47, 31, 15 };
+    const static vector unsigned int partitionZero2  = { 15, 31, 47, 63 };
+
+    // vector registers
+    vector unsigned int r1e, r2e;
+    vector unsigned int mcl;
+    vector unsigned int rc, rg, rt;
+    vector unsigned int ra1, ra2;
+    vector unsigned int rc1, rc2;
+    vector unsigned int rg1, rg2;
+    vector unsigned int rt1, rt2;
+    vector unsigned char sadC,sadD,sadE;
+    vector unsigned int sadF;
+    vector signed int sadG;
+
+
+    // Sort index1 and index2
+    r = (index1 - index2) & -(index1 < index2);
+    minIndex = index2 + r;
+    maxIndex = index1 - r;
+
+    // Locate 128 bit boundary
+    minIndex128 = lastAlignedBoundary(minIndex, CHAR_PER_128);
+    maxIndex128 = lastAlignedBoundary(maxIndex - (maxIndex - minIndex > CHAR_PER_128), CHAR_PER_128);
+
+    // Determine no.of characters to count
+    numChar1 = maxIndex128 - minIndex;
+    numChar2 = maxIndex - maxIndex128;
+
+    // Load encoding into register here in the hope of hiding some memory latency
+    r1e = *(vector unsigned int*)(bwt->bwtCode + minIndex128 / CHAR_PER_WORD);    // Load encoding into register
+    r2e = *(vector unsigned int*)(bwt->bwtCode + maxIndex128 / CHAR_PER_WORD);    // Load encoding into register
+
+    // Set character extraction masks 
+    mcl = vec_splats(0x55555555u);                        // Set bit-clearing mask to 0x55555555....(alternate 1-bit)
+
+    // Set counting mask for 2 x 128 bits
+
+    ra1 = vec_splats(numChar1);        // Load number of characters into register
+    ra2 = vec_splats(numChar2);        // Load number of characters into register
+
+    rc1 = partitionOne1;    // Load partition into register
+    rc2 = partitionOne2;    // Load partition into register
+
+    rg1 = partitionZero1;    // Load partition into register
+    rg2 = partitionZero2;    // Load partition into register
+
+    rc1 = (vector unsigned int)vec_cmpgt(ra1,rc1);  // Compare to generate 4x32 bit mask; the word with counting boundary is all ones
+    rc2 = (vector unsigned int)vec_cmpgt(ra2,rc2);  // Compare to generate 4x32 bit mask; the word with counting boundary is all ones
+
+    rg1 = (vector unsigned int)vec_cmpgt(ra1,rg1);  // Compare to generate 4x32 bit mask; the word with counting boundary is all ones
+    rg2 = (vector unsigned int)vec_cmpgt(ra2,rg2);  // Compare to generate 4x32 bit mask; the word with counting boundary is all ones
+
+    rc1 = my_vec_sr(rc1,(16u - numChar1 % 16) * 2);    // Shift bits so that all word comform to the requirement of counting the word with counting boundary 
+    rc2 = my_vec_sl(rc2,(16u - numChar2 % 16) * 2);    // Shift bits so that all word comform to the requirement of counting the word with counting boundary
+
+    ra1 = vec_or(rc1, rg1);    // Combine two masks
+    ra2 = vec_or(rc2, rg2);    // Combine two masks
+
+    // Start counting; encoding has been loaded into register earlier
+    r1e = vec_and(r1e, ra1);    // Combine encoding with counting mask
+    r2e = vec_and(r2e, ra2);    // Combine encoding with counting mask
+
+    // ra1, ra2, rc1, rc2, rg1, rg2, rt1, rt2 all retired
+
+    // Shift and combine with character selection mask
+
+    ra1 = vec_sr(r1e, vec_splats(1u));    // Shift encoding to right by 1 bit
+    ra2 = vec_sr(r2e, vec_splats(1u));    // Shift encoding to right by 1 bit
+
+    rt1 = vec_and(r1e, mcl);    // Check even-bits = '1'
+    rt2 = vec_and(r2e, mcl);    // Check even-bits = '1'
+
+    rg1 = vec_and(ra1, mcl);    // Check odd-bits = '1'
+    rg2 = vec_and(ra2, mcl);    // Check odd-bits = '1'
+
+    rc1 = vec_andc(mcl, r1e);    // Check even-bits = '0'
+    rc2 = vec_andc(mcl, r2e);    // Check even-bits = '0'
+
+    ra1 = vec_andc(mcl, ra1);    // Check odd-bits = '0'
+    ra2 = vec_andc(mcl, ra2);    // Check odd-bits = '0'
+
+    // r1e, r2e retired
+
+    // Count for 'c' 'g' 't'
+
+    r1e = vec_and(ra1, rt1);        // Combine even and odd bits
+    r2e = vec_and(ra2, rt2);        // Combine even and odd bits
+    ra1 = vec_and(rg1, rc1);        // Combine even and odd bits
+    ra2 = vec_and(rg2, rc2);        // Combine even and odd bits
+    rc1 = vec_and(rg1, rt1);        // Combine even and odd bits
+    rc2 = vec_and(rg2, rt2);        // Combine even and odd bits
+
+#ifndef _ARCH_PWR8
+    rc = vec_add(r1e, r2e);        // Combine 2 x 128 bits by adding them together
+    rg = vec_add(ra1, ra2);        // Combine 2 x 128 bits by adding them together
+    rt = vec_add(rc1, rc2);        // Combine 2 x 128 bits by adding them together
+
+    // All except rc, rg, rt retired
+
+    // Continue counting rc, rg, rt
+
+    mcl = vec_splats(0x33333333u);    // Set bit-clearing mask to 0x33333333....(alternate 2-bits)
+
+    rc1 = vec_sr(rc, vec_splats(2u));        // Shift intermediate result to right by 2 bit
+    rg1 = vec_sr(rg, vec_splats(2u));        // Shift intermediate result to right by 2 bit
+    rt1 = vec_sr(rt, vec_splats(2u));        // Shift intermediate result to right by 2 bit
+
+    rc2 = vec_and(rc, mcl);        // Clear alternate 2-bits of intermediate result by combining with bit-clearing mask (now = 0x33333333....)
+    rg2 = vec_and(rg, mcl);        // Clear alternate 2-bits of intermediate result by combining with bit-clearing mask (now = 0x33333333....)
+    rt2 = vec_and(rt, mcl);        // Clear alternate 2-bits of intermediate result by combining with bit-clearing mask (now = 0x33333333....)
+
+    rc1 = vec_and(rc1, mcl);        // Clear alternate 2-bits of shifted intermediate result by combining with bit-clearing mask (now = 0x33333333....)
+    rg1 = vec_and(rg1, mcl);        // Clear alternate 2-bits of shifted intermediate result by combining with bit-clearing mask (now = 0x33333333....)
+    rt1 = vec_and(rt1, mcl);        // Clear alternate 2-bits of shifted intermediate result by combining with bit-clearing mask (now = 0x33333333....)
+
+    rc = vec_add(rc1, rc2);        // Combine shifted and non-shifted intermediate results by adding them together
+    rg = vec_add(rg1, rg2);        // Combine shifted and non-shifted intermediate results by adding them together
+    rt = vec_add(rt1, rt2);        // Combine shifted and non-shifted intermediate results by adding them together
+
+    mcl = vec_splats(0x0F0F0F0Fu);    // Set bit-clearing mask to 0x0F0F0F0F....(alternate 4-bits)
+    r1e = vec_xor(r1e,r1e);            // Set an all-zero mask
+
+    rc1 = vec_sr(rc, vec_splats(4u));        // Shift intermediate result to right by 4 bit
+    rg1 = vec_sr(rg, vec_splats(4u));        // Shift intermediate result to right by 4 bit
+    rt1 = vec_sr(rt, vec_splats(4u));        // Shift intermediate result to right by 4 bit
+
+    rc2 = vec_add(rc, rc1);        // Combine shifted and non-shifted intermediate results by adding them together
+    rg2 = vec_add(rg, rg1);        // Combine shifted and non-shifted intermediate results by adding them together
+    rt2 = vec_add(rt, rt1);        // Combine shifted and non-shifted intermediate results by adding them together
+
+    rc = vec_and(rc2, mcl);        // Clear alternate 4-bits of intermediate result by combining with bit-clearing mask (now = 0xOFOFOFOF....)
+    rg = vec_and(rg2, mcl);        // Clear alternate 4-bits of intermediate result by combining with bit-clearing mask (now = 0xOFOFOFOF....)
+    rt = vec_and(rt2, mcl);        // Clear alternate 4-bits of intermediate result by combining with bit-clearing mask (now = 0xOFOFOFOF....)
+
+    sadC = vec_min((vector unsigned char)rc,(vector unsigned char)r1e);
+    sadD = vec_max((vector unsigned char)rc,(vector unsigned char)r1e);
+    sadE = vec_sub(sadD,sadC);
+    sadF = vec_splats(0u);
+    sadG = vec_splats(0);
+    sadF = vec_sum4s(sadE,sadF);
+    sadG = vec_sums((vector signed int)sadF,sadG);
+    occValue[1] = ((signed int*)&sadG)[3];
+
+    sadC = vec_min((vector unsigned char)rg,(vector unsigned char)r1e);
+    sadD = vec_max((vector unsigned char)rg,(vector unsigned char)r1e);
+    sadE = vec_sub(sadD,sadC);
+    sadF = vec_splats(0u);
+    sadG = vec_splats(0);
+    sadF = vec_sum4s(sadE,sadF);
+    sadG = vec_sums((vector signed int)sadF,sadG);
+    occValue[2] = ((signed int*)&sadG)[3];
+
+    sadC = vec_min((vector unsigned char)rt,(vector unsigned char)r1e);
+    sadD = vec_max((vector unsigned char)rt,(vector unsigned char)r1e);
+    sadE = vec_sub(sadD,sadC);
+    sadF = vec_splats(0u);
+    sadG = vec_splats(0);
+    sadF = vec_sum4s(sadE,sadF);
+    sadG = vec_sums((vector signed int)sadF,sadG);
+    occValue[3] = ((signed int*)&sadG)[3];
+#endif
+#ifdef _ARCH_PWR8
+    vector unsigned long long a;
+#ifdef __GNUC__
+    a=vec_add(vec_vpopcntd((vector unsigned long long)r1e),vec_vpopcntd((vector unsigned long long)r2e));
+    occValue[1]=a[0]+a[1];
+    a=vec_add(vec_vpopcntd((vector unsigned long long)ra1),vec_vpopcntd((vector unsigned long long)ra2));
+    occValue[2]=a[0]+a[1];
+    a=vec_add(vec_vpopcntd((vector unsigned long long)rc1),vec_vpopcntd((vector unsigned long long)rc2));
+    occValue[3]=a[0]+a[1];
+#else
+    a=vec_add(vec_popcnt((vector unsigned long long)r1e),vec_popcnt((vector unsigned long long)r2e));
+    occValue[1]=a[0]+a[1];
+    a=vec_add(vec_popcnt((vector unsigned long long)ra1),vec_popcnt((vector unsigned long long)ra2));
+    occValue[2]=a[0]+a[1];
+    a=vec_add(vec_popcnt((vector unsigned long long)rc1),vec_popcnt((vector unsigned long long)rc2));
+    occValue[3]=a[0]+a[1];
+#endif
+#endif
+
+    occValue[0] = maxIndex - minIndex - occValue[1] - occValue[2] - occValue[3];
+    printf("%08x %08x %08x %08x\n", occValue[0], occValue[1], occValue[2], occValue[3]);
+}
+#endif
+
+
+#ifdef __x86_64
+void BWTDecodeAll(const BWT *bwt, const unsigned int index1, const unsigned int index2, unsigned int* __restrict occValue) {
+
+    unsigned int numChar1, numChar2, minIndex, maxIndex, minIndex128, maxIndex128;
+    unsigned int r;
+
     const static unsigned int ALIGN_16 partitionOne1[4]  = { 47, 31, 15, 0 };
     const static unsigned int ALIGN_16 partitionOne2[4]  = { 0, 15, 31, 47 };
     const static unsigned int ALIGN_16 partitionZero1[4]  = { 63, 47, 31, 15 };
@@ -755,6 +1100,7 @@ void BWTDecodeAll(const BWT *bwt, const unsigned int index1, const unsigned int
     occValue[0] = maxIndex - minIndex - occValue[1] - occValue[2] - occValue[3];
 
 }
+#endif
 
 
 unsigned int BWTOccValue(const BWT *bwt, unsigned int index, const unsigned int character) {
@@ -874,8 +1220,13 @@ void BWTAllOccValue(const BWT *bwt, unsigned int index, unsigned int* __restrict
     unsigned int ALIGN_16 tempOccValue[ALPHABET_SIZE];
     unsigned int r;
 
-    // SSE registers
+    // vector registers
+#ifdef __x86_64
     __m128i rtov, rov, rc, t1, t2;
+#endif
+#ifdef _ARCH_PPC
+    vector unsigned int rtov, rov, rc, t1, t2;
+#endif
 
     // $ is supposed to be positioned at inverseSa0 but it is not encoded
     // therefore index is subtracted by 1 for adjustment
@@ -893,12 +1244,15 @@ void BWTAllOccValue(const BWT *bwt, unsigned int index, unsigned int* __restrict
 
     BWTAllOccValueExplicit(bwt, occExplicitIndex, occValue);
 
-    if (occIndex != index) {
+    int nowork=(occIndex == index);
+
+    if (__builtin_expect(nowork,1)) return;
 
         BWTDecodeAll(bwt, occIndex, index, tempOccValue);
 
         // The following code add tempOccvalue to occValue if index > occIndex and subtract tempOccValue from occValue if occIndex > index
         r = -(occIndex > index);
+#ifdef __x86_64
         rc = _mm_set1_epi32(r);                // Set rc = r r r r
         rtov = _mm_load_si128((__m128i*)tempOccValue);
         rov = _mm_load_si128((__m128i*)occValue);
@@ -907,11 +1261,18 @@ void BWTAllOccValue(const BWT *bwt, unsigned int index, unsigned int* __restrict
         rov = _mm_add_epi32(rov, t1);
         rov = _mm_sub_epi32(rov, t2);
         _mm_store_si128((__m128i*)occValue, rov);
-
-    } else {
-        return;
-    }
-
+#endif
+#ifdef _ARCH_PPC
+        rc = vec_splats(r);                // Set rc = r r r r
+        rtov = *(vector unsigned int*)tempOccValue;
+        rov = *(vector unsigned int*)occValue;
+        t1 = vec_andc(rtov, rc);
+        t2 = vec_and(rc, rtov);
+        rov = vec_add(rov, t1);
+        rov = vec_sub(rov, t2);
+	*(vector unsigned int*)occValue=rov;
+#endif
+	printf("%s: %08x %08x %08x %08x\n", __func__, occValue[0],occValue[1],occValue[2],occValue[3]);
 }
 
 void BWTAllOccValueTwoIndex(const BWT *bwt, unsigned int index1, unsigned int index2, unsigned int* __restrict occValue1, unsigned int* __restrict occValue2) {
@@ -922,8 +1283,13 @@ void BWTAllOccValueTwoIndex(const BWT *bwt, unsigned int index1, unsigned int in
     unsigned int ALIGN_16 tempOccValue2[ALPHABET_SIZE];
     unsigned int r;
 
-    // SSE registers
+    // vector registers
+#ifdef __x86_64
     __m128i rtov, rc, t1, t2, o1, o2;
+#endif
+#ifdef _ARCH_PPC
+    vector unsigned int rtov, rc, t1, t2, o1, o2;
+#endif
 
     // $ is supposed to be positioned at inverseSa0 but it is not encoded
     // therefore index is subtracted by 1 for adjustment
@@ -960,13 +1326,27 @@ void BWTAllOccValueTwoIndex(const BWT *bwt, unsigned int index1, unsigned int in
 
         // The following code add tempOccvalue to occValue if index > occIndex and subtract tempOccValue from occValue if occIndex > index
         r = -(occIndex1 > index1);
+#ifdef __x86_64
         rtov = _mm_load_si128((__m128i*)tempOccValue1);
         rc = _mm_set1_epi32(r);                // Set rc = r r r r
         t1 = _mm_andnot_si128(rc, rtov);
         t2 = _mm_and_si128(rc, rtov);
         o1 = _mm_sub_epi32(t1, t2);
+#endif
+#ifdef _ARCH_PPC
+        rtov = *(vector unsigned int*)tempOccValue1;
+        rc = vec_splats(r);                // Set rc = r r r r
+        t1 = vec_andc(rtov, rc);
+        t2 = vec_and(rc, rtov);
+        o1 = vec_sub(t1, t2);
+#endif
     } else {
+#ifdef __x86_64
         o1 = _mm_setzero_si128();
+#endif
+#ifdef _ARCH_PPC
+        o1 = vec_xor(o1,o1);
+#endif
     }
 
     if (occIndex2 != index2) {
@@ -975,19 +1355,34 @@ void BWTAllOccValueTwoIndex(const BWT *bwt, unsigned int index1, unsigned int in
 
         // The following code add tempOccvalue to occValue if index > occIndex and subtract tempOccValue from occValue if occIndex > index
         r = -(occIndex2 > index2);
+#ifdef __x86_64
         rc = _mm_set1_epi32(r);                // Set rc = r r r r
         rtov = _mm_load_si128((__m128i*)tempOccValue2);
         t1 = _mm_andnot_si128(rc, rtov);
         t2 = _mm_and_si128(rc, rtov);
         o2 = _mm_sub_epi32(t1, t2);
+#endif
+#ifdef _ARCH_PPC
+        rc = vec_splats(r);                // Set rc = r r r r
+        rtov = *(vector unsigned int*)tempOccValue2;
+        t1 = vec_andc(rtov, rc);
+        t2 = vec_and(rc, rtov);
+        o2 = vec_sub(t1, t2);
 
+#endif
     } else {
+#ifdef __x86_64
         o2 = _mm_setzero_si128();
+#endif
+#ifdef _ARCH_PPC
+        o2 = vec_xor(o2,o2);
+#endif
     }
 
     BWTAllOccValueExplicit(bwt, occExplicitIndex1, occValue1);
     BWTAllOccValueExplicit(bwt, occExplicitIndex2, occValue2);
 
+#ifdef __x86_64
     t1 = _mm_load_si128((__m128i*)occValue1);
     t2 = _mm_load_si128((__m128i*)occValue2);
 
@@ -996,7 +1391,17 @@ void BWTAllOccValueTwoIndex(const BWT *bwt, unsigned int index1, unsigned int in
 
     _mm_store_si128((__m128i*)occValue1, t1);
     _mm_store_si128((__m128i*)occValue2, t2);
+#endif
+#ifdef _ARCH_PPC
+    t1 = *(vector unsigned int*)occValue1;
+    t2 = *(vector unsigned int*)occValue2;
+
+    t1 = vec_add(t1, o1);
+    t2 = vec_add(t2, o2);
 
+    *(vector unsigned int*)occValue1 = t1;
+    *(vector unsigned int*)occValue2 = t2;
+#endif
 }
 
 unsigned int BWTOccValueOnSpot(const BWT *bwt, unsigned int index, unsigned int* __restrict character) {
@@ -1091,6 +1496,7 @@ unsigned int BWTSearchOccValue(const BWT *bwt, const unsigned int character, con
     fprintf(stderr, "BWTSearchOccValue() : unexpected error!\n");
     exit(1);
 
+    return -1;
 }
 
 static INLINE unsigned int BWTOccValueExplicit(const BWT *bwt, const unsigned int occIndexExplicit, const unsigned int character) {
@@ -1114,7 +1520,12 @@ static INLINE void BWTAllOccValueExplicit(const BWT *bwt, const unsigned int occ
     unsigned int occIndexMajor;
     unsigned int compareMask, shift, mask;
 
+#ifdef __x86_64
     __m128i v1, v2, m;
+#endif
+#ifdef _ARCH_PPC
+    vector unsigned int v1, v2, m;
+#endif
 
     occIndexMajor = occIndexExplicit * OCC_INTERVAL / OCC_INTERVAL_MAJOR;
 
@@ -1122,6 +1533,7 @@ static INLINE void BWTAllOccValueExplicit(const BWT *bwt, const unsigned int occ
     shift = 16 & compareMask;
     mask = 0x0000FFFF | compareMask;
 
+#ifdef __x86_64
     v2 = _mm_load_si128((__m128i *)(bwt->occValue + occIndexExplicit / OCC_VALUE_PER_WORD * ALPHABET_SIZE));
     v1 = _mm_load_si128((__m128i *)(bwt->occValueMajor + occIndexMajor * ALPHABET_SIZE));
 
@@ -1133,7 +1545,20 @@ static INLINE void BWTAllOccValueExplicit(const BWT *bwt, const unsigned int occ
     v1 = _mm_add_epi32(v1, v2);
 
     _mm_store_si128((__m128i*)occValueExplicit, v1);
+#endif
+#ifdef _ARCH_PPC
+    v2 = *(vector unsigned int*)(bwt->occValue + occIndexExplicit / OCC_VALUE_PER_WORD * ALPHABET_SIZE);
+    v1 = *(vector unsigned int*)(bwt->occValueMajor + occIndexMajor * ALPHABET_SIZE);
+
+    m = vec_splats(mask);
 
+    v2 = my_vec_sr(v2, shift);
+    v2 = vec_and(v2, m);
+
+    v1 = vec_add(v1, v2);
+
+    *(vector unsigned int*)occValueExplicit = v1;
+#endif
 }
 
 static INLINE void BWTPrefetchOccValueExplicit(const BWT *bwt, const unsigned int occIndexExplicit) {
@@ -1142,14 +1567,18 @@ static INLINE void BWTPrefetchOccValueExplicit(const BWT *bwt, const unsigned in
 
     occIndexMajor = occIndexExplicit * OCC_INTERVAL / OCC_INTERVAL_MAJOR;
 
+#ifdef __x86_64
     _mm_prefetch((char*)(bwt->occValue + occIndexExplicit / OCC_VALUE_PER_WORD * ALPHABET_SIZE), _MM_HINT_T0);
     _mm_prefetch((char*)(bwt->occValueMajor + occIndexMajor * ALPHABET_SIZE), _MM_HINT_T0);
+#endif
 
 }
 
 static INLINE void BWTPrefetchBWT(const BWT *bwt, const unsigned int index) {
 
+#ifdef __x86_64
     _mm_prefetch((char*)(bwt->bwtCode + index / CHAR_PER_WORD), _MM_HINT_NTA);
+#endif
 
 }
 
--- 2bwt-lib/BWT.h.orig
+++ 2bwt-lib/BWT.h
@@ -86,7 +86,7 @@ typedef struct BWT {
     unsigned int saValueSizeInWord;        // Temporary variable to hold the memory allocated
     unsigned int inverseSaSizeInWord;    // Temporary variable to hold the memory allocated
     unsigned int cachedSaIndexSizeInWord;    // Temporary variable to hold the memory allocated
-    unsigned int (*_bwtSaValue)(const BWT*, unsigned int); //Function Pointer to SaValue function
+    unsigned int (*_bwtSaValue)(const struct BWT*, unsigned int); //Function Pointer to SaValue function
 } BWT;
 
 #define MAX_DIAGONAL_LEVEL 4                // Number of sub-pattern to keep for detecting diagonal hit
--- 2bwt-lib/BWTConstruct.c.orig
+++ 2bwt-lib/BWTConstruct.c
@@ -25,8 +25,13 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#ifdef __x86_64
 #include <emmintrin.h>
 #include <mmintrin.h>
+#endif
+#ifdef __ARCH_PWR
+#include <altivec.h>
+#endif
 #include "BWTConstruct.h"
 #include "MiscUtilities.h"
 #include "DNACount.h"
@@ -389,7 +394,12 @@ static void BWTIncPutPackedTextToRank(const unsigned int *packedText, unsigned i
 
     unsigned char ALIGN_16 temp[CHAR_PER_WORD];
 
+#ifdef __x86_64
     __m128i p1, p2, mask;
+#endif
+#ifdef __ARCH_PWR
+    vector unsigned int p1, p2, mask;
+#endif
 
     lastWord = (numChar - 1) / CHAR_PER_WORD;
     numCharInLastWord = numChar - lastWord * CHAR_PER_WORD;
@@ -398,6 +408,7 @@ static void BWTIncPutPackedTextToRank(const unsigned int *packedText, unsigned i
     packedMask = ALL_ONE_MASK >> (BITS_IN_WORD - BIT_PER_CHAR);
     rankIndex = numChar - 1;
     // Unpack word-packed text; temp[0] will be character in the least significant 2 bits
+#ifdef __x86_64
     p1 = _mm_cvtsi32_si128(packedText[lastWord]);
     p2 = _mm_srli_epi32(p1, 4);
     p1 = _mm_unpacklo_epi8(p1, p2);
@@ -409,6 +420,20 @@ static void BWTIncPutPackedTextToRank(const unsigned int *packedText, unsigned i
 
     p1 = _mm_and_si128(p1, mask);
     _mm_store_si128((__m128i*)temp, p1);
+#endif
+#ifdef __ARCH_PWR
+    p1 = (vector unsigned int){0,0,0,packedText[lastWord]};
+    p2 = vec_sr(p1, vec_splats(4u));
+    p1 = (vector unsigned int)vec_mergel((vector unsigned char)p1, (vector unsigned char)p2);
+
+    mask = vec_splats(0x03030303u);
+
+    p2 = vec_sr(p1, vec_splats(2u));
+    p1 = (vector unsigned int)vec_mergel((vector unsigned char)p1, (vector unsigned char)p2);
+
+    p1 = vec_and(p1, mask);
+    *(vector unsigned int*)temp = p1;
+#endif
 
     for (i=CHAR_PER_WORD - numCharInLastWord; i<CHAR_PER_WORD; i++) {
     //DEBUG     printf("N temp[%u]=%u\n",i,temp[i]);
@@ -420,6 +445,7 @@ static void BWTIncPutPackedTextToRank(const unsigned int *packedText, unsigned i
     for (i=lastWord; i--;) {    // loop from lastWord - 1 to 0
 
         // Unpack word-packed text; temp[0] will be character in the least significant 2 bits
+#ifdef __x86_64
         p1 = _mm_cvtsi32_si128(packedText[i]);
         p2 = _mm_srli_epi32(p1, 4);
         p1 = _mm_unpacklo_epi8(p1, p2);
@@ -431,6 +457,20 @@ static void BWTIncPutPackedTextToRank(const unsigned int *packedText, unsigned i
 
         p1 = _mm_and_si128(p1, mask);
         _mm_store_si128((__m128i*)temp, p1);
+#endif
+#ifdef __ARCH_PWR
+        p1 = (vector unsigned int){0,0,0,packedText[lastWord]};
+        p2 = vec_sr(p1, vec_splats(4u));
+        p1 = (vector unsigned int)vec_mergel((vector unsigned char)p1, (vector unsigned char)p2);
+
+        mask = vec_splats(0x03030303u);
+
+        p2 = vec_sr(p1, vec_splats(2u));
+        p1 = (vector unsigned int)vec_mergel((vector unsigned char)p1, (vector unsigned char)p2);
+
+        p1 = vec_and(p1, mask);
+        *(vector unsigned int*)temp= p1;
+#endif
 
         for (j=0; j<CHAR_PER_WORD; j++) {
         //DEBUG     printf("temp[%u]=%u\n",j,temp[j]);
@@ -1495,7 +1535,12 @@ void BWTGenerateCachedSaIndex(const BWT *bwt, const unsigned int numOfChar, cons
                               0x00FFFFFF, 0x03FFFFFF, 0x0FFFFFFF, 0x3FFFFFFF };
 
     unsigned int *cachedSaIndex;
+#ifdef __x86_64
     __m128i r1, r2, cf, cfp1; 
+#endif
+#ifdef __ARCH_PWR
+    vector unsigned int r1, r2, cf, cfp1; 
+#endif
 
     FILE * cachedSaIndexFile;
 
@@ -1523,9 +1568,16 @@ void BWTGenerateCachedSaIndex(const BWT *bwt, const unsigned int numOfChar, cons
     generatedPattern[pos] = (unsigned char)-1;
     saRangeIndex = (unsigned int)-1;
 
+#ifdef __x86_64
     cf = _mm_load_si128((__m128i*)bwt->cumulativeFreq);    // Load cumulative freq into register
     r1 = _mm_set1_epi32(1);
     cfp1 = _mm_add_epi32(cf, r1);
+#endif
+#ifdef __ARCH_PWR
+    cf = *(vector unsigned int*)bwt->cumulativeFreq;    // Load cumulative freq into register
+    r1 = vec_splats(1u);
+    cfp1 = vec_add(cf, r1);
+#endif
 
     saIndexLeft[pos * 4 + 0] = 1 + bwt->cumulativeFreq[0];
     saIndexLeft[pos * 4 + 1] = 1 + bwt->cumulativeFreq[1];
@@ -1556,12 +1608,22 @@ void BWTGenerateCachedSaIndex(const BWT *bwt, const unsigned int numOfChar, cons
             BWTAllOccValueTwoIndex(bwt, saIndexLeft[(pos+1) * 4 + generatedPattern[pos+1]], saIndexRight[(pos+1) * 4 + generatedPattern[pos+1]] + 1,
                                         saIndexLeft + pos * 4, saIndexRight + pos * 4);
             // Add cumulative frequency
+#ifdef __x86_64
             r1 = _mm_load_si128((__m128i*)(saIndexLeft + pos * 4));
             r2 = _mm_load_si128((__m128i*)(saIndexRight + pos * 4));
             r1 = _mm_add_epi32(r1, cfp1);
             r2 = _mm_add_epi32(r2, cf);
             _mm_store_si128((__m128i*)(saIndexLeft + pos * 4), r1);
             _mm_store_si128((__m128i*)(saIndexRight + pos * 4), r2);
+#endif
+#ifdef __ARCH_PWR
+            r1 = *(vector unsigned int*)(saIndexLeft + pos * 4);
+            r2 = *(vector unsigned int*)(saIndexRight + pos * 4);
+            r1 = vec_add(r1, cfp1);
+            r2 = vec_add(r2, cf);
+            *(vector unsigned int*)(saIndexLeft + pos * 4) = r1;
+            *(vector unsigned int*)(saIndexRight + pos * 4) = r2;
+#endif
         }
 
         if (saIndexLeft[pos * 4 + generatedPattern[pos]] <= saIndexRight[pos * 4 + generatedPattern[pos]]) {
--- 2bwt-lib/HSP.c.orig
+++ 2bwt-lib/HSP.c
@@ -27,8 +27,6 @@
 #include <string.h>
 #include <math.h>
 #include <stdint.h>
-#include <emmintrin.h>
-#include <mmintrin.h>
 #include "TextConverter.h"
 #include "MiscUtilities.h"
 #include "Socket.h"
--- 2bwt-lib/HSP.h.orig
+++ 2bwt-lib/HSP.h
@@ -61,10 +61,6 @@
 
 #define MAX_ALIGNMENT_LENGTH           131072
 
-#ifdef __cplusplus
-#define UINT32_MAX              ((uint32_t)-1)
-#endif
-
 //=========================================
 
 #define GRID_SAMPLING_FACTOR 262144
--- 2bwt-lib/MemManager.c.orig
+++ 2bwt-lib/MemManager.c
@@ -26,7 +26,7 @@
 #include <stdlib.h>
 #include <string.h>
 #ifndef _WIN32
-#include <mm_malloc.h>
+#include <vecmisc.h>
 #endif
 #include "MiscUtilities.h"
 #include "MemManager.h"
@@ -1064,7 +1064,7 @@ MMBulk *MMBulkLoad(MMPool *mmPool, FILE *input) {
         //Advance the address by boundaryCushionSize
         mmBulk->directory[i] += mmBulk->boundaryCushionSize;
         
-        fread(mmBulk->directory[i], mmBulk->itemSize << mmBulk->itemPerAllocationInPowerOf2, 1, input);
+        fread(mmBulk->directory[i], sizeof(unsigned char), mmBulk->itemSize << mmBulk->itemPerAllocationInPowerOf2, input);
     }
 
     mmBulk->directory[i] = (unsigned char *) MEMALIGN(mmBulk->boundaryCushionSize * 2 + 
@@ -1078,7 +1078,7 @@ MMBulk *MMBulkLoad(MMPool *mmPool, FILE *input) {
     mmBulk->directory[i] += mmBulk->boundaryCushionSize;
 
     if (mmBulk->nextUnusedItem > 0) {
-        fread(mmBulk->directory[i], mmBulk->itemSize * mmBulk->nextUnusedItem, 1, input);
+        fread(mmBulk->directory[i], sizeof(unsigned char), mmBulk->itemSize * mmBulk->nextUnusedItem, input);
     }
 
 
--- 2bwt-lib/TypeNLimit.h
+++ 2bwt-lib/TypeNLimit.h
@@ -65,8 +65,8 @@
 #define ALIGN_16    __attribute__((aligned(16)))
 #define ALIGN_32    __attribute__((aligned(32)))
 #define ALIGN_64    __attribute__((aligned(64)))
-#define MEMALIGN(a, b)    _mm_malloc(a, b)
-#define FREEALIGN(a)    _mm_free(a)
+#define MEMALIGN(a, b)    vec_malloc(a, b)
+#define FREEALIGN(a)    vec_free(a)
 
 #endif
 
--- 2bwt-lib/devTools/2BWT-Benchmark.c.orig
+++ 2bwt-lib/devTools/2BWT-Benchmark.c
@@ -51,8 +51,9 @@
 #define DEBUG_PERFORM_DECODE_ALL 
 ////////////////////////////////////
 
-#define BM_NUM_OF_THREAD       4
+#define BM_NUM_OF_THREAD       128
 #define BM_TEST_CHARACTER_CODE 3
+#define REPETITIONS 8
 
 #include <stdio.h>
 #include <stdlib.h>
@@ -110,7 +111,7 @@ void *ThreadFunc ( void * _arg ) {
     BWT * bwt = arg->bwt;
     unsigned int * body = arg->bucketBody;
     for (k=startIdx;k<startIdx+arg->bucketSize;k++) {
-        unsigned int result = BWTOccValue(bwt,body[k],BM_TEST_CHARACTER_CODE);
+        volatile unsigned int result = BWTOccValue(bwt,body[k],BM_TEST_CHARACTER_CODE);
         #ifdef DEBUG_GENERATE_OUTPUT
             printf("DEBUG PARAL %llu\t%u\t%u\n",k,body[k],result);
         #endif
@@ -145,10 +146,11 @@ int main(int argc,char ** argv) {
     int sequenceId;
     unsigned int saCount;
     
+    if (argc<2) exit(-1);
     // Load up the index with the below statement
     printf("Loading index ... "); 
     fflush(stdout);
-    Idx2BWT * idx2BWT = BWTLoad2BWT("ncbi.genome1-5.fa.index",".sa");
+    Idx2BWT * idx2BWT = BWTLoad2BWT(argv[1],".sa");
     printf("DONE\n\n"); 
 
     
@@ -159,13 +161,13 @@ int main(int argc,char ** argv) {
         Generate(bwt->textLength);
         return 0;
     #endif
+    if (argc<3) exit(-1);
     
     startTime = setStartTime();
     lastEventTime = startTime;
     
     // -- Settings for BM_NUM_OF_THREAD = 200;
     unsigned long long testBwtIndexesCount = 10000000;
-    unsigned int bucket = testBwtIndexesCount/BM_NUM_OF_THREAD;
     
     // -- Settings for BM_NUM_OF_THREAD = 244;
     //unsigned long long testBwtIndexesCount = 24400000;
@@ -175,10 +177,7 @@ int main(int argc,char ** argv) {
     //unsigned long long testBwtIndexesCount = 244*1000000;
     //unsigned int bucket = testBwtIndexesCount/BM_NUM_OF_THREAD;
     
-    FILE * fp;
-    if (argc>1) {
-        fp = fopen(argv[1],"r");
-    }
+    FILE * fp = fopen(argv[2],"r");
     unsigned int * testBwtIndexes = (unsigned int*) malloc(sizeof(unsigned int) * testBwtIndexesCount);
     for (i=0;i<testBwtIndexesCount;i++) {
         if (argc>1) {
@@ -187,9 +186,7 @@ int main(int argc,char ** argv) {
             testBwtIndexes[i] = rand() % bwt->textLength;
         }
     }
-    if (argc>1) {
-        fclose(fp);
-    }
+    fclose(fp);
     
     timestamp = getElapsedTime(startTime);
     printf("(Elapsed time (Generate Indexes) : %9.4f seconds)\n\n", timestamp);
@@ -198,37 +195,43 @@ int main(int argc,char ** argv) {
     printf("Test Data Size = %llu\n",testBwtIndexesCount);
     
 #ifdef DEBUG_PERFORM_DECODE
-    ////////////////////////////////////////////////////////
-    // Version of software that split the buffer to MIC cores
-    ////////////////////////////////////////////////////////
-    printf("MIC Parallelism %u\n",BM_NUM_OF_THREAD);
-    for (j=0;j<BM_NUM_OF_THREAD;j++) {
-        threadArgs[j].bwt=bwt;
-        threadArgs[j].bucketStartIdx=j*bucket;
-        threadArgs[j].bucketBody=testBwtIndexes;
-        threadArgs[j].bucketSize=bucket;
-    }
-    #ifndef DEBUG_GENERATE_OUTPUT
-    for (j=0;j<5;j++) {
-    #endif
-        for (i=0; i<BM_NUM_OF_THREAD; i++){
-            if (pthread_create(&(threads[i]), NULL, ThreadFunc, (void*) &(threadArgs[i])))
-                fprintf(stderr,"Can't create thread %d!\n",i), exit(1);
-        }
-        for (i=0; i<BM_NUM_OF_THREAD; i++){
-            if (threads[i]!=0 ) {
-                if (pthread_join(threads[i],NULL))
-                    fprintf(stderr,"Thread %d crashed!\n",i), exit(1);
-                threads[i]=0;
-            }
-        }
-        timestamp = getElapsedTime(startTime);
-        printf("(Elapsed time (Search Index) : %9.4f seconds)\n\n", timestamp - lastEventTime);
-        lastEventTime = timestamp;
-    #ifndef DEBUG_GENERATE_OUTPUT
+    for (int k=1;k<=BM_NUM_OF_THREAD;k++) {
+		////////////////////////////////////////////////////////
+		// Version of software that split the buffer to MIC cores
+		////////////////////////////////////////////////////////
+		//printf("Parallelism %u\n",k);
+		unsigned int bucket = testBwtIndexesCount/k;
+		for (j=0;j<k;j++) {
+		    threadArgs[j].bwt=bwt;
+		    threadArgs[j].bucketStartIdx=j*bucket;
+		    threadArgs[j].bucketBody=testBwtIndexes;
+		    threadArgs[j].bucketSize=bucket;
+		}
+		#ifndef DEBUG_GENERATE_OUTPUT
+		for (j=0;j<REPETITIONS;j++) {
+		#endif
+		    for (i=0; i<k; i++){
+		        if (pthread_create(&(threads[i]), NULL, ThreadFunc, (void*) &(threadArgs[i])))
+		            fprintf(stderr,"Can't create thread %d!\n",i), exit(1);
+		    }
+		    for (i=0; i<k; i++){
+		        if (threads[i]!=0 ) {
+		            if (pthread_join(threads[i],NULL))
+		                fprintf(stderr,"Thread %d crashed!\n",i), exit(1);
+		            threads[i]=0;
+		        }
+		    }
+		    //timestamp = getElapsedTime(startTime);
+		    //printf("(Elapsed time (Search Index) : %9.4f seconds)\n", timestamp - lastEventTime);
+		    //lastEventTime = timestamp;
+		#ifndef DEBUG_GENERATE_OUTPUT
+		}
+		#endif
+		timestamp = getElapsedTime(startTime);
+		printf("%d\t%9.4f\n", k,(timestamp - lastEventTime)/REPETITIONS);
+		lastEventTime = timestamp;
     }
-    #endif
-    
+    /*
     ////////////////////////////////////////////////////////
     // Version of software that does it with one core only
     ////////////////////////////////////////////////////////
@@ -248,35 +251,49 @@ int main(int argc,char ** argv) {
     #ifndef DEBUG_GENERATE_OUTPUT
     }
     #endif
+    */
 #endif
     
     
 #ifdef DEBUG_PERFORM_DECODE_ALL
-    ////////////////////////////////////////////////////////
-    // Version of software that split the buffer to MIC cores
-    ////////////////////////////////////////////////////////
-    printf("MIC ALL Parallelism %u\n",BM_NUM_OF_THREAD);
-    #ifndef DEBUG_GENERATE_OUTPUT
-    for (j=0;j<5;j++) {
-    #endif
-        for (i=0; i<BM_NUM_OF_THREAD; i++){
-            if (pthread_create(&(threads[i]), NULL, ThreadFuncAll, (void*) &(threadArgs[i])))
-                fprintf(stderr,"Can't create thread %d!\n",i), exit(1);
-        }
-        for (i=0; i<BM_NUM_OF_THREAD; i++){
-            if (threads[i]!=0 ) {
-                if (pthread_join(threads[i],NULL))
-                    fprintf(stderr,"Thread %d crashed!\n",i), exit(1);
-                threads[i]=0;
-            }
-        }
-        timestamp = getElapsedTime(startTime);
-        printf("(Elapsed time (Search Index) : %9.4f seconds)\n\n", timestamp - lastEventTime);
-        lastEventTime = timestamp;
-    #ifndef DEBUG_GENERATE_OUTPUT
+    for (int k=1;k<=BM_NUM_OF_THREAD;k++) {
+		////////////////////////////////////////////////////////
+		// Version of software that split the buffer to MIC cores
+		////////////////////////////////////////////////////////
+		//printf("MIC ALL Parallelism %u\n",k);
+		unsigned int bucket = testBwtIndexesCount/k;
+		for (j=0;j<k;j++) {
+		    threadArgs[j].bwt=bwt;
+		    threadArgs[j].bucketStartIdx=j*bucket;
+		    threadArgs[j].bucketBody=testBwtIndexes;
+		    threadArgs[j].bucketSize=bucket;
+		}
+		#ifndef DEBUG_GENERATE_OUTPUT
+		for (j=0;j<REPETITIONS;j++) {
+		#endif
+		    for (i=0; i<k; i++){
+		        if (pthread_create(&(threads[i]), NULL, ThreadFuncAll, (void*) &(threadArgs[i])))
+		            fprintf(stderr,"Can't create thread %d!\n",i), exit(1);
+		    }
+		    for (i=0; i<k; i++){
+		        if (threads[i]!=0 ) {
+		            if (pthread_join(threads[i],NULL))
+		                fprintf(stderr,"Thread %d crashed!\n",i), exit(1);
+		            threads[i]=0;
+		        }
+		    }
+		    //timestamp = getElapsedTime(startTime);
+		    //printf("(Elapsed time (Search Index) : %9.4f seconds)\n", timestamp - lastEventTime);
+		    //lastEventTime = timestamp;
+		#ifndef DEBUG_GENERATE_OUTPUT
+		}
+		#endif
+		timestamp = getElapsedTime(startTime);
+		printf("%d\t%9.4f\n", k,(timestamp - lastEventTime)/REPETITIONS);
+		lastEventTime = timestamp;
     }
-    #endif
-    
+ 
+    /*
     ////////////////////////////////////////////////////////
     // Version of software that does it with one core only
     ////////////////////////////////////////////////////////
@@ -297,6 +314,7 @@ int main(int argc,char ** argv) {
     #ifndef DEBUG_GENERATE_OUTPUT
     }
     #endif
+    */ 
 #endif
 
 
--- BGS-HostAlgnmtAlgo2.cpp.orig
+++ BGS-HostAlgnmtAlgo2.cpp
@@ -279,8 +279,8 @@ unsigned long long BWTExactModelForward_Lookup2 ( SRAQueryInput * qInput,
     unsigned long long rev_r = 0;
     unsigned long long j;
     //MARK_FOR_64_ENHANCEMENT ----
-    unsigned int oL[ALPHABET_SIZE];
-    unsigned int oR[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oL[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oR[ALPHABET_SIZE];
     unsigned int oCount[ALPHABET_SIZE];
     //MARK_FOR_64_ENHANCEMENT ---
     SRAQueryInfo * qInfo = qInput->QueryInfo;
@@ -461,8 +461,8 @@ unsigned long long BWTExactModelBackward_Lookup2 ( SRAQueryInput * qInput,
     int ceThreshold = alignmentCase->steps[stepInCase].ceThreshold;
 
     //MARK_FOR_64_ENHANCEMENT ----
-    unsigned int oL[ALPHABET_SIZE];
-    unsigned int oR[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oL[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oR[ALPHABET_SIZE];
     //MARK_FOR_64_ENHANCEMENT ---
 
     unsigned int lookupLength = ( lookupTable->tableSize > len ) ? len : lookupTable->tableSize;
@@ -564,8 +564,8 @@ unsigned long long BWTExactModelBackwardAnyDirection_Lookup2 ( SRAQueryInput * q
     unsigned long long j;
 
     //MARK_FOR_64_ENHANCEMENT ----
-    unsigned int oL[ALPHABET_SIZE];
-    unsigned int oR[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oL[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oR[ALPHABET_SIZE];
     unsigned int oCount[ALPHABET_SIZE];
     //MARK_FOR_64_ENHANCEMENT ---
 
@@ -750,8 +750,8 @@ unsigned long long BWTExactModelBackward2 ( SRAQueryInput * qInput, int i, int e
     step = -1;
 
     //MARK_FOR_64_ENHANCEMENT ----
-    unsigned int oL[ALPHABET_SIZE];
-    unsigned int oR[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oL[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oR[ALPHABET_SIZE];
     //MARK_FOR_64_ENHANCEMENT ---
 
     int branchCount = 0;
@@ -856,8 +856,8 @@ unsigned long long BWTExactModelAnyDirection2 ( SRAQueryInput * qInput, int i, i
     //printf("[BWTExactModelAnyDirection] %d/%d\n", i,len);
 
     //MARK_FOR_64_ENHANCEMENT ----
-    unsigned int oL[ALPHABET_SIZE];
-    unsigned int oR[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oL[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oR[ALPHABET_SIZE];
     unsigned int oCount[ALPHABET_SIZE];
     //MARK_FOR_64_ENHANCEMENT ---
 
@@ -968,8 +968,8 @@ unsigned long long BWTMismatchModelAnyDirection2 ( SRAQueryInput * qInput, int i
     char branchChar = 0;
     //printf("Alignment from %d to %d allowing %u-%u mismatches.\n", start,end, minMismatch, maxMismatch);
     //MARK_FOR_64_ENHANCEMENT ----
-    unsigned int oL[ALPHABET_SIZE];
-    unsigned int oR[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oL[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oR[ALPHABET_SIZE];
     unsigned int oCount[ALPHABET_SIZE];
     //MARK_FOR_64_ENHANCEMENT ---
     pos = start + step * i;
@@ -1098,8 +1098,8 @@ unsigned long long BWTMismatchModelBackward2 ( SRAQueryInput * qInput, int i, in
     unsigned char c;
     //printf("Alignment from %d to %d allowing %u-%u mismatches. i = %d\n", start,end, minMismatch, maxMismatch,i);
     //MARK_FOR_64_ENHANCEMENT ----
-    unsigned int oL[ALPHABET_SIZE];
-    unsigned int oR[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oL[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oR[ALPHABET_SIZE];
     unsigned int oCount[ALPHABET_SIZE];
     //MARK_FOR_64_ENHANCEMENT ---
     int branchCount = 0;
@@ -1220,8 +1220,8 @@ unsigned long long BWTEditModelAnyDirection2 ( SRAQueryInput * qInput, int i, in
     //printf("[BWTEditModelAnyDirection] Read %llu Alignment from %d to %d, i = %d\n", qInfo->ReadId,start,end,i);
     //printf("[BWTEditModelAnyDirection] ErrorType=%d  allowing %u-%u edits.\n", errType, minEdit, maxEdit);
     //MARK_FOR_64_ENHANCEMENT ----
-    unsigned int oL[ALPHABET_SIZE];
-    unsigned int oR[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oL[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oR[ALPHABET_SIZE];
     unsigned int oCount[ALPHABET_SIZE];
     //MARK_FOR_64_ENHANCEMENT ---
     nc = ALPHABET_SIZE + 1;
@@ -1431,8 +1431,8 @@ unsigned long long BWTEditModelBackward2 ( SRAQueryInput * qInput, int i, int ed
     //printf("[BWTEditModelBackward] Read %llu Alignment from %d to %d, i = %d\n", qInfo->ReadId,start,end,i);
     //printf("[BWTEditModelBackward] ErrorType=%d  allowing %u-%u edits.\n", errType, minEdit, maxEdit);
     //MARK_FOR_64_ENHANCEMENT ----
-    unsigned int oL[ALPHABET_SIZE];
-    unsigned int oR[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oL[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oR[ALPHABET_SIZE];
     unsigned int oCount[ALPHABET_SIZE];
     //MARK_FOR_64_ENHANCEMENT ---
     pos = start + step * i;
--- BGS-HostAlgnmtAlgoSingle.cpp.orig
+++ BGS-HostAlgnmtAlgoSingle.cpp
@@ -270,8 +270,8 @@ unsigned long long BWTExactModelForward_Lookup3 ( SRAQueryInput * qInput,
     unsigned long long rev_r = 0;
     unsigned long long j;
     //MARK_FOR_64_ENHANCEMENT ----
-    unsigned int oL[ALPHABET_SIZE];
-    unsigned int oR[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oL[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oR[ALPHABET_SIZE];
     unsigned int oCount[ALPHABET_SIZE];
     //MARK_FOR_64_ENHANCEMENT ---
     SRAQueryInfo * qInfo = qInput->QueryInfo;
@@ -452,8 +452,8 @@ unsigned long long BWTExactModelBackward_Lookup3 ( SRAQueryInput * qInput,
     int ceThreshold = alignmentCase->steps[stepInCase].ceThreshold;
 
     //MARK_FOR_64_ENHANCEMENT ----
-    unsigned int oL[ALPHABET_SIZE];
-    unsigned int oR[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oL[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oR[ALPHABET_SIZE];
     //MARK_FOR_64_ENHANCEMENT ---
 
     unsigned int lookupLength = ( lookupTable->tableSize > len ) ? len : lookupTable->tableSize;
@@ -553,8 +553,8 @@ unsigned long long BWTExactModelBackwardAnyDirection_Lookup3 ( SRAQueryInput * q
     unsigned long long j;
 
     //MARK_FOR_64_ENHANCEMENT ----
-    unsigned int oL[ALPHABET_SIZE];
-    unsigned int oR[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oL[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oR[ALPHABET_SIZE];
     unsigned int oCount[ALPHABET_SIZE];
     //MARK_FOR_64_ENHANCEMENT ---
 
@@ -739,8 +739,8 @@ unsigned long long BWTExactModelBackward3 ( SRAQueryInput * qInput, int i, int e
     step = -1;
 
     //MARK_FOR_64_ENHANCEMENT ----
-    unsigned int oL[ALPHABET_SIZE];
-    unsigned int oR[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oL[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oR[ALPHABET_SIZE];
     //MARK_FOR_64_ENHANCEMENT ---
 
     int branchCount = 0;
@@ -845,8 +845,8 @@ unsigned long long BWTExactModelAnyDirection3 ( SRAQueryInput * qInput, int i, i
     //printf("[BWTExactModelAnyDirection] %d/%d\n", i,len);
 
     //MARK_FOR_64_ENHANCEMENT ----
-    unsigned int oL[ALPHABET_SIZE];
-    unsigned int oR[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oL[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oR[ALPHABET_SIZE];
     unsigned int oCount[ALPHABET_SIZE];
     //MARK_FOR_64_ENHANCEMENT ---
 
@@ -957,8 +957,8 @@ unsigned long long BWTMismatchModelAnyDirection3 ( SRAQueryInput * qInput, int i
     char branchChar = 0;
     //printf("Alignment from %d to %d allowing %u-%u mismatches.\n", start,end, minMismatch, maxMismatch);
     //MARK_FOR_64_ENHANCEMENT ----
-    unsigned int oL[ALPHABET_SIZE];
-    unsigned int oR[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oL[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oR[ALPHABET_SIZE];
     unsigned int oCount[ALPHABET_SIZE];
     //MARK_FOR_64_ENHANCEMENT ---
     pos = start + step * i;
@@ -1087,8 +1087,8 @@ unsigned long long BWTMismatchModelBackward3 ( SRAQueryInput * qInput, int i, in
     unsigned char c;
     //printf("Alignment from %d to %d allowing %u-%u mismatches. i = %d\n", start,end, minMismatch, maxMismatch,i);
     //MARK_FOR_64_ENHANCEMENT ----
-    unsigned int oL[ALPHABET_SIZE];
-    unsigned int oR[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oL[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oR[ALPHABET_SIZE];
     unsigned int oCount[ALPHABET_SIZE];
     //MARK_FOR_64_ENHANCEMENT ---
     int branchCount = 0;
@@ -1209,8 +1209,8 @@ unsigned long long BWTEditModelAnyDirection3 ( SRAQueryInput * qInput, int i, in
     //printf("[BWTEditModelAnyDirection] Read %llu Alignment from %d to %d, i = %d\n", qInfo->ReadId,start,end,i);
     //printf("[BWTEditModelAnyDirection] ErrorType=%d  allowing %u-%u edits.\n", errType, minEdit, maxEdit);
     //MARK_FOR_64_ENHANCEMENT ----
-    unsigned int oL[ALPHABET_SIZE];
-    unsigned int oR[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oL[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oR[ALPHABET_SIZE];
     unsigned int oCount[ALPHABET_SIZE];
     //MARK_FOR_64_ENHANCEMENT ---
     nc = ALPHABET_SIZE + 1;
@@ -1420,8 +1420,8 @@ unsigned long long BWTEditModelBackward3 ( SRAQueryInput * qInput, int i, int ed
     //printf("[BWTEditModelBackward] Read %llu Alignment from %d to %d, i = %d\n", qInfo->ReadId,start,end,i);
     //printf("[BWTEditModelBackward] ErrorType=%d  allowing %u-%u edits.\n", errType, minEdit, maxEdit);
     //MARK_FOR_64_ENHANCEMENT ----
-    unsigned int oL[ALPHABET_SIZE];
-    unsigned int oR[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oL[ALPHABET_SIZE];
+    unsigned int ALIGN_16 oR[ALPHABET_SIZE];
     unsigned int oCount[ALPHABET_SIZE];
     //MARK_FOR_64_ENHANCEMENT ---
     pos = start + step * i;
--- CPUfunctions.cpp.orig
+++ CPUfunctions.cpp
@@ -3017,7 +3017,7 @@ void bwase_initialize ( int * g_log_n )
 {
     int i;
 
-    for ( i = 1; i != 256; ++i ) { g_log_n[i] = ( int ) ( 4.343 * log ( i ) + 0.5 ); }
+    for ( i = 1; i != 256; ++i ) { g_log_n[i] = ( int ) ( 4.343 * log ( (float)i ) + 0.5 ); }
 }
 
 // A Thread Wrapper to perform the CPU task
--- DV-DPfunctions.cu.orig
+++ DV-DPfunctions.cu
@@ -2323,7 +2323,7 @@ void HalfEndAlignmentEngine::performAlignment (
     engine->performAlignment ( numDPAlignedRead, numDPAlignment );
     delete engine;
 }
-HalfEndAlignmentEngine::HalfEndAlignmentEngine * HalfEndAlignmentEngine::engine;
+HalfEndAlignmentEngine * HalfEndAlignmentEngine::engine;
 
 // ****
 void DP_Space::algnmtCPUThread ( int threadId, void *& empty )
--- PE.cpp.orig
+++ PE.cpp
@@ -68,7 +68,7 @@ int writeULLToStr ( unsigned long long num, char * str )
 
     if ( num > 0 )
     {
-        digit = ( ( int ) log10 ( num ) ) + 1;
+        digit = ( ( int ) log10 ( (float)num ) ) + 1;
     }
 
     for ( int i = digit - 1; i >= 0; i-- )
@@ -97,7 +97,7 @@ int writeNumToStr ( int num, char * str )
 
     if ( num > 0 )
     {
-        digit = ( ( int ) log10 ( num ) ) + 1;
+        digit = ( ( int ) log10 ( (float)num ) ) + 1;
     }
 
     for ( int i = digit - 1; i >= 0; i-- )
--- PEAlgnmt.cpp.orig
+++ PEAlgnmt.cpp
@@ -1165,7 +1165,7 @@ int writeNumToStr2 ( int num, char * str )
 
     if ( num > 0 )
     {
-        digit = ( ( int ) log10 ( num ) ) + 1;
+        digit = ( ( int ) log10 ( (float)num ) ) + 1;
     }
 
     for ( int i = digit - 1; i >= 0; i-- )
@@ -1204,7 +1204,7 @@ void inputSoap3AnsToArray ( AllHits * allHits, unsigned int readID, HSPAux * hsp
     if ( ans != NULL && ( sa_num > 0 || occ_num > 0 ) )
     {
         // create the cigar
-        cigar = ( char * ) malloc ( ( ( int ) log10 ( readLength ) ) + 3 );
+        cigar = ( char * ) malloc ( ( ( int ) log10 ( (float)readLength ) ) + 3 );
         int pos = writeNumToStr2 ( readLength, cigar );
         cigar[pos++] = 'M';
         cigar[pos++] = '\0';
--- SOAP3-DP.cu.orig
+++ SOAP3-DP.cu
@@ -47,6 +47,10 @@
 
 #include "aio_thread.h"
 
+#ifdef USEVPROF
+#include "vprof.h"
+#endif
+
 int main ( int argc, char ** argv )
 {
     // ======================================================================================
@@ -128,6 +132,9 @@ int main ( int argc, char ** argv )
     MultiInputItem * multiInput = NULL;
     int expNum = 0;
     int currExp = 0;
+#ifdef USEVPROF
+    vprof_start();
+#endif
     // ======================================================================================
     // | Configuration on GPU functions                                                     |
     // ======================================================================================
@@ -831,6 +838,7 @@ int main ( int argc, char ** argv )
         // ======================================================================================
         // | SHOW THE COMMAND FOR MERGING THE OUTPUT FILES INTO ONE                             |
         // ======================================================================================
+    	double outputStartTime = getElapsedTime ( startTime );
         show_merge_file_command2 ( input_options, input_options.outputPrefix, ini_params.Ini_NumOfCpuThreads );
 
         // update the output files
@@ -924,6 +932,9 @@ int main ( int argc, char ** argv )
             }
         }
 
+    	double totalOutputTime = getElapsedTime ( startTime ) - outputStartTime;
+        printf ( "[Main] Output time  : %9.4f seconds\n", totalOutputTime);
+
         // ======================================================================================
         // | Load the next set of files                                                         |
         // ======================================================================================
@@ -1207,6 +1218,10 @@ int main ( int argc, char ** argv )
     {
         SAMOutputHeaderDestruct ( &samOutputHeader );
     }
+#ifdef USEVPROF
+    vprof_stop();
+    vprof_write();
+#endif
 
     return 0;
 }
--- aio_thread.cpp.orig
+++ aio_thread.cpp
@@ -149,7 +149,7 @@ bool InputReadsBufferWaitForStatus ( InputReadsBuffer * irb, enum BufferStatus s
         }
         else
         {
-            sleep ( 1 );
+            usleep ( 1000 );
         }
     }
 };
@@ -212,7 +212,7 @@ bool AIOInputBufferWaitForStatus ( AIOInputBuffer * aiob, enum AIOInputBufferSta
         }
         else
         {
-            sleep ( 1 );
+            usleep ( 1000 );
         }
     }
 };
@@ -569,7 +569,7 @@ InputReadsBuffer * LoadReadsFromAIOBuffer ( AIOInputBuffer * aiob )
         }
         else
         {
-            sleep ( 1 );
+            usleep ( 1000 );
 #ifdef DEBUG_AIO_THREAD
 
             if ( !aiob->bufferFilled )
--- definitions.h.orig
+++ definitions.h
@@ -71,7 +71,6 @@
 #define MAX_SA_RANGES_ALLOWED1_SMALL_READS 4
 #define MAX_SA_RANGES_ALLOWED2_SMALL_READS 1024
 
-// best 8192 128
 #define NUM_BLOCKS 8192
 #define THREADS_PER_BLOCK 128
 #define QUERIES_PER_THREAD 1
@@ -121,7 +120,7 @@
 #define MAX_NUM_CASES 10
 #define MAX_FILEEXT_LEN 6
 #define MAX_FILE_NAME_LEN 255
-#define MAX_NUM_CPU_THREADS 16
+#define MAX_NUM_CPU_THREADS 256
 #define MAX_NUM_MISMATCH 4
 
 #define OUTPUT_ALL_VALID 1
--- samtools-0.1.18/bam_index.c.orig
+++ samtools-0.1.18/bam_index.c
@@ -358,7 +358,7 @@ static bam_index_t *bam_index_load_core(FILE *fp)
 			if (bam_is_be) bam_swap_endian_4p(&p->n);
 			p->m = p->n;
 			p->list = (pair64_t*)malloc(p->m * 16);
-			fread(p->list, 16, p->n, fp);
+			fread(p->list, sizeof(uint64_t), 2*p->n, fp);
 			if (bam_is_be) {
 				int x;
 				for (x = 0; x < p->n; ++x) {
@@ -372,7 +372,7 @@ static bam_index_t *bam_index_load_core(FILE *fp)
 		if (bam_is_be) bam_swap_endian_4p(&index2->n);
 		index2->m = index2->n;
 		index2->offset = (uint64_t*)calloc(index2->m, 8);
-		fread(index2->offset, index2->n, 8, fp);
+		fread(index2->offset, sizeof(uint64_t), index2->n, fp);
 		if (bam_is_be)
 			for (j = 0; j < index2->n; ++j) bam_swap_endian_8p(&index2->offset[j]);
 	}
--- samtools-0.1.18/bgzf.c.orig
+++ samtools-0.1.18/bgzf.c
@@ -354,8 +354,8 @@ deflate_block(BGZF* fp, int block_length)
             report_error(fp, "remainder too large");
             return -1;
         }
-        memcpy(fp->uncompressed_block,
-               fp->uncompressed_block + input_length,
+        memcpy((Bytef*)fp->uncompressed_block,
+               (Bytef*)fp->uncompressed_block + input_length,
                remaining);
     }
     fp->block_offset = remaining;
--- samtools-0.1.18/razf.c.orig
+++ samtools-0.1.18/razf.c
@@ -280,7 +280,7 @@ static void _razf_buffered_write(RAZF *rz, const void *data, int size){
 			n = RZ_BUFFER_SIZE - rz->buf_len;
 			for(i=0;i<n;i++) ((char*)rz->inbuf + rz->buf_len)[i] = ((char*)data)[i];
 			size -= n;
-			data += n;
+			data = (char*)data+n;
 			rz->buf_len += n;
 		}
 	}
@@ -294,7 +294,7 @@ int razf_write(RAZF* rz, const void *data, int size){
 	while(rz->in + rz->buf_len + size >= next_block){
 		n = next_block - rz->in - rz->buf_len;
 		_razf_buffered_write(rz, data, n);
-		data += n;
+		data = (char*)data+n;
 		size -= n;
 		razf_flush(rz);
 		add_zindex(rz, rz->in, rz->out);
@@ -397,7 +397,7 @@ static RAZF* razf_open_r(int fd, int _load_index){
 	rz->block_pos = rz->header_size;
 	rz->next_block_pos = rz->header_size;
 	rz->block_off = 0;
-	if(ext_len < 7 || memcmp(rz->inbuf + ext_off, c, 4) != 0) return rz;
+	if(ext_len < 7 || memcmp((Bytef*)rz->inbuf + ext_off, c, 4) != 0) return rz;
 	if(((((unsigned char*)rz->inbuf)[ext_off + 5] << 8) | ((unsigned char*)rz->inbuf)[ext_off + 6]) != RZ_BLOCK_SIZE){
 		fprintf(stderr, " -- WARNING: RZ_BLOCK_SIZE is not %d, treat source as gz file.  in %s -- %s:%d --\n", RZ_BLOCK_SIZE, __FUNCTION__, __FILE__, __LINE__);
 		return rz;
@@ -628,13 +628,13 @@ int razf_read(RAZF *rz, void *data, int size){
 				for(i=0;i<size;i++) ((char*)data)[i] = ((char*)rz->outbuf + rz->buf_off)[i];
 				rz->buf_off += size;
 				rz->buf_len -= size;
-				data += size;
+				data =(char*)data+size;
 				rz->block_off += size;
 				size = 0;
 				break;
 			} else {
 				for(i=0;i<rz->buf_len;i++) ((char*)data)[i] = ((char*)rz->outbuf + rz->buf_off)[i];
-				data += rz->buf_len;
+				data =(char*)data+ rz->buf_len;
 				size -= rz->buf_len;
 				rz->block_off += rz->buf_len;
 				rz->buf_off = 0;
--- ssse3_popcount.cpp.orig
+++ ssse3_popcount.cpp
@@ -28,6 +28,7 @@
 #include <strings.h>
 #include <time.h>
 
+#ifdef __x86_64
 //#define ALIGN_DATA
 #ifdef ALIGN_DATA
 #   define __aligned__ __attribute__((aligned(16)))
@@ -225,4 +226,4 @@ uint32_t ssse3_popcount3 ( uint8_t * buffer, int chunks16 )
     );
     return result;
 }
-
+#endif
