#------------------------------------------------------------------------------
# Environment (re)configuration script that makes Intel Parallel Studio XE the
# preferred toolchain for building BioBuilds packages on x86_64 Linux.
#
# The choice of (default) optimization flags comes from the following:
# - "Intel C++ Compiler 17.0 Developer Guide and Reference"
# - "Quick Ref. Guide to Optimization with Intel C++ & Fortran Compilers v16"
# - "Step by Step Performance Optimization with Intel C++ Compiler"
#------------------------------------------------------------------------------

# Sanity check script usage
if [ "$0" == "$BASH_SOURCE" ]; then
    echo "*** ERROR: '$0' must be sourced; use 'source $0' instead." >&2
    exit 1
fi
if [ -z "$BASH_VERSION" ]; then
    echo "*** ERROR: '$0' currently only supports the bash shell." >&2
    return
fi

# Make sure Intel Parallel Studio XE is installed in this environment
: ${PSXE_ROOT:="/opt/intel"}
PSXE_BIN="${PSXE_ROOT}/bin"

if [[ ! -x "${PSXE_BIN}/compilervars.sh" ]]; then
    echo "*** ERROR: Could not find Intel Parallel Studio XE" >&2
    exit 1
fi

# Environment configuration script provided by Parallel Studio XE
source "${PSXE_BIN}/compilervars.sh" -arch "intel64" -platform "linux"

# Make sure we have the right version of Parallel Studio installed
ICC_VER=`icc --version | head -n1 | awk '{print $3;}'`
if [[ "$ICC_VER" != "@@COMPILER_VER@@" ]]; then
    echo "*** ERROR: Intel Parallel Studio 2018" >&2
    exit 1
fi

# Update compiler variables to point to the Parallel Studio binaries
CC="${PSXE_BIN}/icc"
CXX="${PSXE_BIN}/icpc"
FC="${PSXE_BIN}/ifort"
F77=
AR="${PSXE_BIN}/xiar"
LD="${PSXE_BIN}/xild"

CC_IS_GNU=0
CXX_IS_GNU=0
FC_IS_GNU=0


# Look through the existing *FLAGS variables and remove options that (may)
# conflict with the ones we set below.
declare -a keep_flags
for var in CPPFLAGS CFLAGS CXXFLAGS FCFLAGS LDFLAGS;
do
    keep_flags=()
    for flag in ${!var}; do
        case $flag in
            # Drop these flags...
            -m*) ;;     # Machine options
            -O*) ;;     # Standard optimization levels
            -fvect-cost-model) ;;   # set in top-level "build.sh"
            -fpeel-loops) ;;        # set in top-level "build.sh"

            # ...and keep all other flags
            *) new_flags+=($flag) ;;
        esac
    done
    eval ${var}="\${new_flags[@]}"
done
unset keep_flags


# Tell the compilers to target 64-bit CPUs that support _at least_ the Intel
# SSE4.2 instruction set (effectively, Nehalem or later microarchitectures).
#
# ** WARNING **: This flag produces binaries that WILL NOT run on older CPUs
# (nor, possibly, on some mobile CPUs). Attempts to run ICC-built binaries on
# unsupported CPUs will immediately fail with a "Please verify your OS and CPU
# support SSE4_2 and POPCNT instructions" error message; users encountering
# such errors should switch to the non-"opt" version of the package.
ARCH_FLAGS="-m64 -xSSE4.2"

# Enable automatically-dispatched alternative code paths that provide
# additional performance improvements for newer microarchitectures:
#
#   - "AVX": Intel Sandy Bridge & AMD Bulldozer family
#   - "CORE-AVX-I": Intel Ivy Bridge (AVX + RNRND/Float-16 instructions)
#   - "CORE-AVX2": Intel Haswell/Broadwell & AMD Excavator
#
# We're _not_ including "CORE-AVX512" in this list since "normal" processors
# that support this instruction set (i.e., CPUs other than Xeon Phis) aren't in
# widespread use right now. We'll come back and reconsider this decision as
# Skylake-/Cannonlake-derived CPUs gain traction.
ARCH_FLAGS="${ARCH_FLAGS} -axAVX,CORE-AVX-I,CORE-AVX2"

# Generic optimization flag. Favor "-O3" over "-O2" to enable more aggressive
# loop and memory-access optimizations, on the assumption that the scientific
# code featured in BioBuilds will benefit from such optimizations more often
# than not. Quoting Intel's optimization quick reference guide: "[The -O3]
# option is particularly recommended for applications that have loops that do
# many floating-point calculations or process large data sets."
OPT_FLAGS="-O3"

# By default, use certain aggressive floating-point optimizations that could
# affect result precision and/or reproducibility. In particular, we "may get
# significant differences in [the] result depending on whether the compiler
# uses x87 or SSE/AVX instructions to implement floating-point operations".
#
# Users can override this behavior and get more standards-compliant floating
# point behvaior by setting the "FP_MODEL" enviroment variable to "precise"
# before sourcing this script. Note that one downside of doing so is having to
# trust that the upstream code authors got their choices of floating-point
# precision and order of operations correct.
case `tr '[:upper:]' '[:lower:]' <<<"${FP_MODEL:-}"` in
    precise)
        OPT_FLAGS="${OPT_FLAGS} -fp-model precise"
        ;;
    *)
        OPT_FLAGS="${OPT_FLAGS} -fp-model fast=1"

        # By default, also allow optimizations that could generate less-precise
        # results than full IEEE-754 division; e.g., computing "A/B" into "A *
        # (1/B)". We don't seem to have too many (if any) applications in
        # BioBuilds that require full precision, standards-compliant division,
        # so we'll enable this by default for now.
        OPT_FLAGS="${OPT_FLAGS} -no-prec-div"
        ;;
esac

# Enable single- and multi-file inter-procedural optimizations
OPT_FLAGS="${OPT_FLAGS} -ip -ipo"

# Enable auto-parallelization. Note that this option may generate binaries that
# depend on `libiomp.so`, so the corresponding conda package should have the
# Intel runtime libraries ("intel-{icc,ifort}-libs") as a runtime dependency.
OPT_FLAGS="${OPT_FLAGS} -parallel"
LDFLAGS="${LDFLAGS} -parallel"

CFLAGS="${CFLAGS} ${ARCH_FLAGS} ${OPT_FLAGS}"
CXXFLAGS="${CXXFLAGS} ${ARCH_FLAGS} ${OPT_FLAGS}"
FCFLAGS="${ARCH_FLAGS} ${OPT_FLAGS}"
