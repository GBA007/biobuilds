--- 2BWT-Builder.c
+++ 2BWT-Builder.c
@@ -118,8 +118,8 @@ void ExtractionHighOccPattern(const BWT *bwt, int index, unsigned int l, unsigne
             //If the packing is not finished
             unsigned int new_l,new_r;
             
-            unsigned int occCount_pstart[4];
-            unsigned int occCount_pend[4];
+            unsigned int occCount_pstart[4] __attribute__((aligned(16)));
+            unsigned int occCount_pend[4] __attribute__((aligned(16)));
             BWTAllOccValue(bwt,l,occCount_pstart);
             BWTAllOccValue(bwt,r + 1,occCount_pend);
             
--- BWT.c
+++ BWT.c
@@ -31,8 +31,8 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <emmintrin.h>
-#include <mmintrin.h>
+#include <vec128int.h>
+#include <vecmisc.h>
 #include "BWT.h"
 #include "MiscUtilities.h"
 #include "DNACount.h"
@@ -398,78 +398,78 @@ unsigned int BWTDecode(const BWT *bwt, const unsigned int index1, const unsigned
 	numChar2 = maxIndex - maxIndex128;
 
 	// Load encoding into register here in the hope of hiding some memory latency
-	r1e = _mm_load_si128((__m128i *)(bwt->bwtCode + minIndex128 / CHAR_PER_WORD));	// Load encoding into register
-	r2e = _mm_load_si128((__m128i *)(bwt->bwtCode + maxIndex128 / CHAR_PER_WORD));	// Load encoding into register
+	r1e = vec_load1q((__m128i *)(bwt->bwtCode + minIndex128 / CHAR_PER_WORD));	// Load encoding into register
+	r2e = vec_load1q((__m128i *)(bwt->bwtCode + maxIndex128 / CHAR_PER_WORD));	// Load encoding into register
 
 	// Set character extraction masks 
-	m0 = _mm_set1_epi32(0xFFFFFFFF + (character & 1));	// Character selection mask for even bits
-	m1 = _mm_set1_epi32(0xFFFFFFFF + (character >> 1));	// Character selection mask for odd bits
-	mcl = _mm_set1_epi32(0x55555555);					// Set bit-clearing mask to 0x55555555....(alternate 1-bit)
+	m0 = vec_splat4sw(0xFFFFFFFF + (character & 1));	// Character selection mask for even bits
+	m1 = vec_splat4sw(0xFFFFFFFF + (character >> 1));	// Character selection mask for odd bits
+	mcl = vec_splat4sw(0x55555555);					// Set bit-clearing mask to 0x55555555....(alternate 1-bit)
 
 	// Set counting mask for 2 x 128 bits
 
-	r1a = _mm_set1_epi32(numChar1);		// Load number of characters into register
-	r2a = _mm_set1_epi32(numChar2);		// Load number of characters into register
+	r1a = vec_splat4sw(numChar1);		// Load number of characters into register
+	r2a = vec_splat4sw(numChar2);		// Load number of characters into register
 
-	r1b = _mm_load_si128((__m128i*)partitionOne1);	// Load partition into register
-	r2b = _mm_load_si128((__m128i*)partitionOne2);	// Load partition into register
+	r1b = vec_load1q((__m128i*)partitionOne1);	// Load partition into register
+	r2b = vec_load1q((__m128i*)partitionOne2);	// Load partition into register
 
-	r1c = _mm_load_si128((__m128i*)partitionZero1);	// Load partition into register
-	r2c = _mm_load_si128((__m128i*)partitionZero2);	// Load partition into register
+	r1c = vec_load1q((__m128i*)partitionZero1);	// Load partition into register
+	r2c = vec_load1q((__m128i*)partitionZero2);	// Load partition into register
 
-	r1b = _mm_cmpgt_epi32(r1a, r1b);				// Compare to generate 4x32 bit mask; the word with counting boundary is all ones
-	r2b = _mm_cmpgt_epi32(r2a, r2b);				// Compare to generate 4x32 bit mask; the word with counting boundary is all ones
+	r1b = vec_comparegt4sw(r1a, r1b);				// Compare to generate 4x32 bit mask; the word with counting boundary is all ones
+	r2b = vec_comparegt4sw(r2a, r2b);				// Compare to generate 4x32 bit mask; the word with counting boundary is all ones
 				
-	r1c = _mm_cmpgt_epi32(r1a, r1c);				// Compare to generate 4x32 bit mask; the word with counting boundary is all zeros
-	r2c = _mm_cmpgt_epi32(r2a, r2c);				// Compare to generate 4x32 bit mask; the word with counting boundary is all zeros
+	r1c = vec_comparegt4sw(r1a, r1c);				// Compare to generate 4x32 bit mask; the word with counting boundary is all zeros
+	r2c = vec_comparegt4sw(r2a, r2c);				// Compare to generate 4x32 bit mask; the word with counting boundary is all zeros
 
-	r1b = _mm_srli_epi32(r1b, (16 - numChar1 % 16) * 2);	// Shift bits so that all word comform to the requirement of counting the word with counting boundary 
-	r2b = _mm_slli_epi32(r2b, (16 - numChar2 % 16) * 2);	// Shift bits so that all word comform to the requirement of counting the word with counting boundary
+	r1b = vec_shiftrightimmediate4sw(r1b, (16 - numChar1 % 16) * 2);	// Shift bits so that all word comform to the requirement of counting the word with counting boundary 
+	r2b = vec_shiftleftimmediate4sw(r2b, (16 - numChar2 % 16) * 2);	// Shift bits so that all word comform to the requirement of counting the word with counting boundary
 
-	r1c = _mm_or_si128(r1b, r1c);	// Combine two masks
-	r2c = _mm_or_si128(r2b, r2c);	// Combine two masks
+	r1c = vec_bitor1q(r1b, r1c);	// Combine two masks
+	r2c = vec_bitor1q(r2b, r2c);	// Combine two masks
 
-	r1c = _mm_and_si128(r1c, mcl);	// Combine with bit-clearing mask (now = 0x55555555....)
-	r2c = _mm_and_si128(r2c, mcl);	// Combine with bit-clearing mask (now = 0x55555555....)
+	r1c = vec_bitand1q(r1c, mcl);	// Combine with bit-clearing mask (now = 0x55555555....)
+	r2c = vec_bitand1q(r2c, mcl);	// Combine with bit-clearing mask (now = 0x55555555....)
 
 	// Start counting; encoding has been loaded into register earlier
 
-	r1b = _mm_srli_epi32(r1e, 1);	// Shift encoding to right by 1 bit
-	r2b = _mm_srli_epi32(r2e, 1);	// Shift encoding to right by 1 bit
+	r1b = vec_shiftrightimmediate4sw(r1e, 1);	// Shift encoding to right by 1 bit
+	r2b = vec_shiftrightimmediate4sw(r2e, 1);	// Shift encoding to right by 1 bit
 
-	r1a = _mm_xor_si128(r1e, m0);	// Check even-bits with mask
-	r2a = _mm_xor_si128(r2e, m0);	// Check even-bits with mask
+	r1a = vec_bitxor1q(r1e, m0);	// Check even-bits with mask
+	r2a = vec_bitxor1q(r2e, m0);	// Check even-bits with mask
 
-	r1b = _mm_xor_si128(r1b, m1);	// Check odd-bits with mask
-	r2b = _mm_xor_si128(r2b, m1);	// Check odd-bits with mask
+	r1b = vec_bitxor1q(r1b, m1);	// Check odd-bits with mask
+	r2b = vec_bitxor1q(r2b, m1);	// Check odd-bits with mask
 
-	r1a = _mm_and_si128(r1a, r1b);	// Combine even and odd bits
-	r2a = _mm_and_si128(r2a, r2b);	// Combine even and odd bits
+	r1a = vec_bitand1q(r1a, r1b);	// Combine even and odd bits
+	r2a = vec_bitand1q(r2a, r2b);	// Combine even and odd bits
 
-	r1a = _mm_and_si128(r1a, r1c);	// Combine with counting mask, which has been combined with bit-clearing mask of 0x55555555.... 
-	r2a = _mm_and_si128(r2a, r2c);	// Combine with counting mask, which has been combined with bit-clearing mask of 0x55555555.... 
+	r1a = vec_bitand1q(r1a, r1c);	// Combine with counting mask, which has been combined with bit-clearing mask of 0x55555555.... 
+	r2a = vec_bitand1q(r2a, r2c);	// Combine with counting mask, which has been combined with bit-clearing mask of 0x55555555.... 
 
 	// Combine 2 x 128 bits and continue counting
 
-	r1a = _mm_add_epi32(r1a, r2a);		// Combine 2 x 128 bits by adding them together
+	r1a = vec_add4sw(r1a, r2a);		// Combine 2 x 128 bits by adding them together
 
-	mcl = _mm_set1_epi32(0x33333333);	// Set bit-clearing mask to 0x33333333....(alternate 2-bits)
+	mcl = vec_splat4sw(0x33333333);	// Set bit-clearing mask to 0x33333333....(alternate 2-bits)
 
-	r1b = _mm_srli_epi32(r1a, 2);		// Shift intermediate result to right by 2 bit
-	r1a = _mm_and_si128(r1a, mcl);		// Clear alternate 2-bits of intermediate result by combining with bit-clearing mask (now = 0x33333333....)
-	r1b = _mm_and_si128(r1b, mcl);		// Clear alternate 2-bits of shifted intermediate result by combining with bit-clearing mask (now = 0x33333333....)
-	r1a = _mm_add_epi32(r1a, r1b);		// Combine shifted and non-shifted intermediate results by adding them together
+	r1b = vec_shiftrightimmediate4sw(r1a, 2);		// Shift intermediate result to right by 2 bit
+	r1a = vec_bitand1q(r1a, mcl);		// Clear alternate 2-bits of intermediate result by combining with bit-clearing mask (now = 0x33333333....)
+	r1b = vec_bitand1q(r1b, mcl);		// Clear alternate 2-bits of shifted intermediate result by combining with bit-clearing mask (now = 0x33333333....)
+	r1a = vec_add4sw(r1a, r1b);		// Combine shifted and non-shifted intermediate results by adding them together
 
-	mcl = _mm_set1_epi32(0x0F0F0F0F);	// Set bit-clearing mask to 0x0F0F0F0F....(alternate 4-bits)
-	m0 = _mm_setzero_si128();			// Set an all-zero mask
+	mcl = vec_splat4sw(0x0F0F0F0F);	// Set bit-clearing mask to 0x0F0F0F0F....(alternate 4-bits)
+	m0 = vec_zero1q();			// Set an all-zero mask
 
-	r1b = _mm_srli_epi32(r1a, 4);		// Shift intermediate result to right by 2 bit
-	r1a = _mm_add_epi32(r1a, r1b);		// Combine shifted and non-shifted intermediate results by adding them together
-	r1a = _mm_and_si128(r1a, mcl);		// Clear alternate 4-bits of intermediate result by combining with bit-clearing mask (now = 0xOFOFOFOF....)
+	r1b = vec_shiftrightimmediate4sw(r1a, 4);		// Shift intermediate result to right by 2 bit
+	r1a = vec_add4sw(r1a, r1b);		// Combine shifted and non-shifted intermediate results by adding them together
+	r1a = vec_bitand1q(r1a, mcl);		// Clear alternate 4-bits of intermediate result by combining with bit-clearing mask (now = 0xOFOFOFOF....)
 
-	r1a = _mm_sad_epu8(r1a, m0);		// Treating the 128 bit as 16 x 8 bit; summing up the 1st 8 x 8 bit into 1st 64-bit and 2nd 8 x 8 bit into 2nd 64-bit
+	r1a = vec_sumabsdiffs16ub(r1a, m0);		// Treating the 128 bit as 16 x 8 bit; summing up the 1st 8 x 8 bit into 1st 64-bit and 2nd 8 x 8 bit into 2nd 64-bit
 
-	return _mm_extract_epi16(r1a, 0) + _mm_extract_epi16(r1a, 4);	// Extract and return result from register
+	return vec_extract8sh(r1a, 0) + vec_extract8sh(r1a, 4);	// Extract and return result from register
 
 }
 
@@ -512,117 +512,117 @@ void BWTDecodeAll(const BWT *bwt, const unsigned int index1, const unsigned int
 	numChar2 = maxIndex - maxIndex128;
 
 	// Load encoding into register here in the hope of hiding some memory latency
-	r1e = _mm_load_si128((__m128i *)(bwt->bwtCode + minIndex128 / CHAR_PER_WORD));	// Load encoding into register
-	r2e = _mm_load_si128((__m128i *)(bwt->bwtCode + maxIndex128 / CHAR_PER_WORD));	// Load encoding into register
+	r1e = vec_load1q((__m128i *)(bwt->bwtCode + minIndex128 / CHAR_PER_WORD));	// Load encoding into register
+	r2e = vec_load1q((__m128i *)(bwt->bwtCode + maxIndex128 / CHAR_PER_WORD));	// Load encoding into register
 
 	// Set character extraction masks 
-	mcl = _mm_set1_epi32(0x55555555);						// Set bit-clearing mask to 0x55555555....(alternate 1-bit)
+	mcl = vec_splat4sw(0x55555555);						// Set bit-clearing mask to 0x55555555....(alternate 1-bit)
 
 	// Set counting mask for 2 x 128 bits
 
-	ra1 = _mm_set1_epi32(numChar1);		// Load number of characters into register
-	ra2 = _mm_set1_epi32(numChar2);		// Load number of characters into register
+	ra1 = vec_splat4sw(numChar1);		// Load number of characters into register
+	ra2 = vec_splat4sw(numChar2);		// Load number of characters into register
 
-	rc1 = _mm_load_si128((__m128i*)partitionOne1);	// Load partition into register
-	rc2 = _mm_load_si128((__m128i*)partitionOne2);	// Load partition into register
+	rc1 = vec_load1q((__m128i*)partitionOne1);	// Load partition into register
+	rc2 = vec_load1q((__m128i*)partitionOne2);	// Load partition into register
 
-	rg1 = _mm_load_si128((__m128i*)partitionZero1);	// Load partition into register
-	rg2 = _mm_load_si128((__m128i*)partitionZero2);	// Load partition into register
+	rg1 = vec_load1q((__m128i*)partitionZero1);	// Load partition into register
+	rg2 = vec_load1q((__m128i*)partitionZero2);	// Load partition into register
 
-	rc1 = _mm_cmpgt_epi32(ra1, rc1);				// Compare to generate 4x32 bit mask; the word with counting boundary is all ones
-	rc2 = _mm_cmpgt_epi32(ra2, rc2);				// Compare to generate 4x32 bit mask; the word with counting boundary is all ones
+	rc1 = vec_comparegt4sw(ra1, rc1);				// Compare to generate 4x32 bit mask; the word with counting boundary is all ones
+	rc2 = vec_comparegt4sw(ra2, rc2);				// Compare to generate 4x32 bit mask; the word with counting boundary is all ones
 
-	rg1 = _mm_cmpgt_epi32(ra1, rg1);				// Compare to generate 4x32 bit mask; the word with counting boundary is all zeros
-	rg2 = _mm_cmpgt_epi32(ra2, rg2);				// Compare to generate 4x32 bit mask; the word with counting boundary is all zeros
+	rg1 = vec_comparegt4sw(ra1, rg1);				// Compare to generate 4x32 bit mask; the word with counting boundary is all zeros
+	rg2 = vec_comparegt4sw(ra2, rg2);				// Compare to generate 4x32 bit mask; the word with counting boundary is all zeros
 
-	rc1 = _mm_srli_epi32(rc1, (16 - numChar1 % 16) * 2);	// Shift bits so that all word comform to the requirement of counting the word with counting boundary 
-	rc2 = _mm_slli_epi32(rc2, (16 - numChar2 % 16) * 2);	// Shift bits so that all word comform to the requirement of counting the word with counting boundary
+	rc1 = vec_shiftrightimmediate4sw(rc1, (16 - numChar1 % 16) * 2);	// Shift bits so that all word comform to the requirement of counting the word with counting boundary 
+	rc2 = vec_shiftleftimmediate4sw(rc2, (16 - numChar2 % 16) * 2);	// Shift bits so that all word comform to the requirement of counting the word with counting boundary
 
-	ra1 = _mm_or_si128(rc1, rg1);	// Combine two masks
-	ra2 = _mm_or_si128(rc2, rg2);	// Combine two masks
+	ra1 = vec_bitor1q(rc1, rg1);	// Combine two masks
+	ra2 = vec_bitor1q(rc2, rg2);	// Combine two masks
 
 	// Start counting; encoding has been loaded into register earlier
-	r1e = _mm_and_si128(r1e, ra1);	// Combine encoding with counting mask
-	r2e = _mm_and_si128(r2e, ra2);	// Combine encoding with counting mask
+	r1e = vec_bitand1q(r1e, ra1);	// Combine encoding with counting mask
+	r2e = vec_bitand1q(r2e, ra2);	// Combine encoding with counting mask
 
 	// ra1, ra2, rc1, rc2, rg1, rg2, rt1, rt2 all retired
 
 	// Shift and combine with character selection mask
 
-	ra1 = _mm_srli_epi32(r1e, 1);	// Shift encoding to right by 1 bit
-	ra2 = _mm_srli_epi32(r2e, 1);	// Shift encoding to right by 1 bit
+	ra1 = vec_shiftrightimmediate4sw(r1e, 1);	// Shift encoding to right by 1 bit
+	ra2 = vec_shiftrightimmediate4sw(r2e, 1);	// Shift encoding to right by 1 bit
 
-	rt1 = _mm_and_si128(r1e, mcl);	// Check even-bits = '1'
-	rt2 = _mm_and_si128(r2e, mcl);	// Check even-bits = '1'
+	rt1 = vec_bitand1q(r1e, mcl);	// Check even-bits = '1'
+	rt2 = vec_bitand1q(r2e, mcl);	// Check even-bits = '1'
 
-	rg1 = _mm_and_si128(ra1, mcl);	// Check odd-bits = '1'
-	rg2 = _mm_and_si128(ra2, mcl);	// Check odd-bits = '1'
+	rg1 = vec_bitand1q(ra1, mcl);	// Check odd-bits = '1'
+	rg2 = vec_bitand1q(ra2, mcl);	// Check odd-bits = '1'
 
-	rc1 = _mm_andnot_si128(r1e, mcl);	// Check even-bits = '0'
-	rc2 = _mm_andnot_si128(r2e, mcl);	// Check even-bits = '0'
+	rc1 = vec_bitandnotleft1q(r1e, mcl);	// Check even-bits = '0'
+	rc2 = vec_bitandnotleft1q(r2e, mcl);	// Check even-bits = '0'
 
-	ra1 = _mm_andnot_si128(ra1, mcl);	// Check odd-bits = '0'
-	ra2 = _mm_andnot_si128(ra2, mcl);	// Check odd-bits = '0'
+	ra1 = vec_bitandnotleft1q(ra1, mcl);	// Check odd-bits = '0'
+	ra2 = vec_bitandnotleft1q(ra2, mcl);	// Check odd-bits = '0'
 
 	// r1e, r2e retired
 
 	// Count for 'c' 'g' 't'
 
-	r1e = _mm_and_si128(ra1, rt1);		// Combine even and odd bits
-	r2e = _mm_and_si128(ra2, rt2);		// Combine even and odd bits
-	ra1 = _mm_and_si128(rg1, rc1);		// Combine even and odd bits
-	ra2 = _mm_and_si128(rg2, rc2);		// Combine even and odd bits
-	rc1 = _mm_and_si128(rg1, rt1);		// Combine even and odd bits
-	rc2 = _mm_and_si128(rg2, rt2);		// Combine even and odd bits
+	r1e = vec_bitand1q(ra1, rt1);		// Combine even and odd bits
+	r2e = vec_bitand1q(ra2, rt2);		// Combine even and odd bits
+	ra1 = vec_bitand1q(rg1, rc1);		// Combine even and odd bits
+	ra2 = vec_bitand1q(rg2, rc2);		// Combine even and odd bits
+	rc1 = vec_bitand1q(rg1, rt1);		// Combine even and odd bits
+	rc2 = vec_bitand1q(rg2, rt2);		// Combine even and odd bits
 
-	rc = _mm_add_epi32(r1e, r2e);		// Combine 2 x 128 bits by adding them together
-	rg = _mm_add_epi32(ra1, ra2);		// Combine 2 x 128 bits by adding them together
-	rt = _mm_add_epi32(rc1, rc2);		// Combine 2 x 128 bits by adding them together
+	rc = vec_add4sw(r1e, r2e);		// Combine 2 x 128 bits by adding them together
+	rg = vec_add4sw(ra1, ra2);		// Combine 2 x 128 bits by adding them together
+	rt = vec_add4sw(rc1, rc2);		// Combine 2 x 128 bits by adding them together
 
 	// All except rc, rg, rt retired
 
 	// Continue counting rc, rg, rt
 
-	mcl = _mm_set1_epi32(0x33333333);	// Set bit-clearing mask to 0x33333333....(alternate 2-bits)
+	mcl = vec_splat4sw(0x33333333);	// Set bit-clearing mask to 0x33333333....(alternate 2-bits)
 
-	rc1 = _mm_srli_epi32(rc, 2);		// Shift intermediate result to right by 2 bit
-	rg1 = _mm_srli_epi32(rg, 2);		// Shift intermediate result to right by 2 bit
-	rt1 = _mm_srli_epi32(rt, 2);		// Shift intermediate result to right by 2 bit
+	rc1 = vec_shiftrightimmediate4sw(rc, 2);		// Shift intermediate result to right by 2 bit
+	rg1 = vec_shiftrightimmediate4sw(rg, 2);		// Shift intermediate result to right by 2 bit
+	rt1 = vec_shiftrightimmediate4sw(rt, 2);		// Shift intermediate result to right by 2 bit
 
-	rc2 = _mm_and_si128(rc, mcl);		// Clear alternate 2-bits of intermediate result by combining with bit-clearing mask (now = 0x33333333....)
-	rg2 = _mm_and_si128(rg, mcl);		// Clear alternate 2-bits of intermediate result by combining with bit-clearing mask (now = 0x33333333....)
-	rt2 = _mm_and_si128(rt, mcl);		// Clear alternate 2-bits of intermediate result by combining with bit-clearing mask (now = 0x33333333....)
+	rc2 = vec_bitand1q(rc, mcl);		// Clear alternate 2-bits of intermediate result by combining with bit-clearing mask (now = 0x33333333....)
+	rg2 = vec_bitand1q(rg, mcl);		// Clear alternate 2-bits of intermediate result by combining with bit-clearing mask (now = 0x33333333....)
+	rt2 = vec_bitand1q(rt, mcl);		// Clear alternate 2-bits of intermediate result by combining with bit-clearing mask (now = 0x33333333....)
 
-	rc1 = _mm_and_si128(rc1, mcl);		// Clear alternate 2-bits of shifted intermediate result by combining with bit-clearing mask (now = 0x33333333....)
-	rg1 = _mm_and_si128(rg1, mcl);		// Clear alternate 2-bits of shifted intermediate result by combining with bit-clearing mask (now = 0x33333333....)
-	rt1 = _mm_and_si128(rt1, mcl);		// Clear alternate 2-bits of shifted intermediate result by combining with bit-clearing mask (now = 0x33333333....)
+	rc1 = vec_bitand1q(rc1, mcl);		// Clear alternate 2-bits of shifted intermediate result by combining with bit-clearing mask (now = 0x33333333....)
+	rg1 = vec_bitand1q(rg1, mcl);		// Clear alternate 2-bits of shifted intermediate result by combining with bit-clearing mask (now = 0x33333333....)
+	rt1 = vec_bitand1q(rt1, mcl);		// Clear alternate 2-bits of shifted intermediate result by combining with bit-clearing mask (now = 0x33333333....)
 
-	rc = _mm_add_epi32(rc1, rc2);		// Combine shifted and non-shifted intermediate results by adding them together
-	rg = _mm_add_epi32(rg1, rg2);		// Combine shifted and non-shifted intermediate results by adding them together
-	rt = _mm_add_epi32(rt1, rt2);		// Combine shifted and non-shifted intermediate results by adding them together
+	rc = vec_add4sw(rc1, rc2);		// Combine shifted and non-shifted intermediate results by adding them together
+	rg = vec_add4sw(rg1, rg2);		// Combine shifted and non-shifted intermediate results by adding them together
+	rt = vec_add4sw(rt1, rt2);		// Combine shifted and non-shifted intermediate results by adding them together
 
-	mcl = _mm_set1_epi32(0x0F0F0F0F);	// Set bit-clearing mask to 0x0F0F0F0F....(alternate 4-bits)
-	r1e = _mm_setzero_si128();			// Set an all-zero mask
+	mcl = vec_splat4sw(0x0F0F0F0F);	// Set bit-clearing mask to 0x0F0F0F0F....(alternate 4-bits)
+	r1e = vec_zero1q();			// Set an all-zero mask
 
-	rc1 = _mm_srli_epi32(rc, 4);		// Shift intermediate result to right by 2 bit
-	rg1 = _mm_srli_epi32(rg, 4);		// Shift intermediate result to right by 2 bit
-	rt1 = _mm_srli_epi32(rt, 4);		// Shift intermediate result to right by 2 bit
+	rc1 = vec_shiftrightimmediate4sw(rc, 4);		// Shift intermediate result to right by 2 bit
+	rg1 = vec_shiftrightimmediate4sw(rg, 4);		// Shift intermediate result to right by 2 bit
+	rt1 = vec_shiftrightimmediate4sw(rt, 4);		// Shift intermediate result to right by 2 bit
 
-	rc2 = _mm_add_epi32(rc, rc1);		// Combine shifted and non-shifted intermediate results by adding them together
-	rg2 = _mm_add_epi32(rg, rg1);		// Combine shifted and non-shifted intermediate results by adding them together
-	rt2 = _mm_add_epi32(rt, rt1);		// Combine shifted and non-shifted intermediate results by adding them together
+	rc2 = vec_add4sw(rc, rc1);		// Combine shifted and non-shifted intermediate results by adding them together
+	rg2 = vec_add4sw(rg, rg1);		// Combine shifted and non-shifted intermediate results by adding them together
+	rt2 = vec_add4sw(rt, rt1);		// Combine shifted and non-shifted intermediate results by adding them together
 
-	rc = _mm_and_si128(rc2, mcl);		// Clear alternate 4-bits of intermediate result by combining with bit-clearing mask (now = 0xOFOFOFOF....)
-	rg = _mm_and_si128(rg2, mcl);		// Clear alternate 4-bits of intermediate result by combining with bit-clearing mask (now = 0xOFOFOFOF....)
-	rt = _mm_and_si128(rt2, mcl);		// Clear alternate 4-bits of intermediate result by combining with bit-clearing mask (now = 0xOFOFOFOF....)
+	rc = vec_bitand1q(rc2, mcl);		// Clear alternate 4-bits of intermediate result by combining with bit-clearing mask (now = 0xOFOFOFOF....)
+	rg = vec_bitand1q(rg2, mcl);		// Clear alternate 4-bits of intermediate result by combining with bit-clearing mask (now = 0xOFOFOFOF....)
+	rt = vec_bitand1q(rt2, mcl);		// Clear alternate 4-bits of intermediate result by combining with bit-clearing mask (now = 0xOFOFOFOF....)
 
-	rc = _mm_sad_epu8(rc, r1e);			// Treating the 128 bit as 16 x 8 bit; summing up the 1st 8 x 8 bit into 1st 64-bit and 2nd 8 x 8 bit into 2nd 64-bit
-	rg = _mm_sad_epu8(rg, r1e);			// Treating the 128 bit as 16 x 8 bit; summing up the 1st 8 x 8 bit into 1st 64-bit and 2nd 8 x 8 bit into 2nd 64-bit
-	rt = _mm_sad_epu8(rt, r1e);			// Treating the 128 bit as 16 x 8 bit; summing up the 1st 8 x 8 bit into 1st 64-bit and 2nd 8 x 8 bit into 2nd 64-bit
+	rc = vec_sumabsdiffs16ub(rc, r1e);			// Treating the 128 bit as 16 x 8 bit; summing up the 1st 8 x 8 bit into 1st 64-bit and 2nd 8 x 8 bit into 2nd 64-bit
+	rg = vec_sumabsdiffs16ub(rg, r1e);			// Treating the 128 bit as 16 x 8 bit; summing up the 1st 8 x 8 bit into 1st 64-bit and 2nd 8 x 8 bit into 2nd 64-bit
+	rt = vec_sumabsdiffs16ub(rt, r1e);			// Treating the 128 bit as 16 x 8 bit; summing up the 1st 8 x 8 bit into 1st 64-bit and 2nd 8 x 8 bit into 2nd 64-bit
 
-	occValue[1] = _mm_extract_epi16(rc, 0) + _mm_extract_epi16(rc, 4);	// Extract result from register and store into variable
-	occValue[2] = _mm_extract_epi16(rg, 0) + _mm_extract_epi16(rg, 4);	// Extract result from register and store into variable
-	occValue[3] = _mm_extract_epi16(rt, 0) + _mm_extract_epi16(rt, 4);	// Extract result from register and store into variable
+	occValue[1] = vec_extract8sh(rc, 0) + vec_extract8sh(rc, 4);	// Extract result from register and store into variable
+	occValue[2] = vec_extract8sh(rg, 0) + vec_extract8sh(rg, 4);	// Extract result from register and store into variable
+	occValue[3] = vec_extract8sh(rt, 0) + vec_extract8sh(rt, 4);	// Extract result from register and store into variable
 	occValue[0] = maxIndex - minIndex - occValue[1] - occValue[2] - occValue[3];
 
 }
@@ -648,7 +648,7 @@ unsigned int BWTOccValue(const BWT *bwt, unsigned int index, const unsigned int
 	occExplicitIndex = (index + OCC_INTERVAL / 2 - 1) / OCC_INTERVAL;	// Bidirectional encoding
 	occIndex = occExplicitIndex * OCC_INTERVAL;
 
-	//_mm_prefetch((char*)(memory + address[j+1]), _MM_HINT_NTA);
+	//vec_prefetch((char*)(memory + address[j+1]), vec_HINT_NTA);
 
 
 	occValue = BWTOccValueExplicit(bwt, occExplicitIndex, character);
@@ -772,14 +772,14 @@ void BWTAllOccValue(const BWT *bwt, unsigned int index, unsigned int* __restrict
 
 		// The following code add tempOccvalue to occValue if index > occIndex and subtract tempOccValue from occValue if occIndex > index
 		r = -(occIndex > index);
-		rc = _mm_set1_epi32(r);				// Set rc = r r r r
-		rtov = _mm_load_si128((__m128i*)tempOccValue);
-		rov = _mm_load_si128((__m128i*)occValue);
-		t1 = _mm_andnot_si128(rc, rtov);
-		t2 = _mm_and_si128(rc, rtov);
-		rov = _mm_add_epi32(rov, t1);
-		rov = _mm_sub_epi32(rov, t2);
-		_mm_store_si128((__m128i*)occValue, rov);
+		rc = vec_splat4sw(r);				// Set rc = r r r r
+		rtov = vec_load1q((__m128i*)tempOccValue);
+		rov = vec_load1q((__m128i*)occValue);
+		t1 = vec_bitandnotleft1q(rc, rtov);
+		t2 = vec_bitand1q(rc, rtov);
+		rov = vec_add4sw(rov, t1);
+		rov = vec_subtract4sw(rov, t2);
+		vec_store1q((__m128i*)occValue, rov);
 
 	} else {
 		return;
@@ -833,13 +833,13 @@ void BWTAllOccValueTwoIndex(const BWT *bwt, unsigned int index1, unsigned int in
 
 		// The following code add tempOccvalue to occValue if index > occIndex and subtract tempOccValue from occValue if occIndex > index
 		r = -(occIndex1 > index1);
-		rtov = _mm_load_si128((__m128i*)tempOccValue1);
-		rc = _mm_set1_epi32(r);				// Set rc = r r r r
-		t1 = _mm_andnot_si128(rc, rtov);
-		t2 = _mm_and_si128(rc, rtov);
-		o1 = _mm_sub_epi32(t1, t2);
+		rtov = vec_load1q((__m128i*)tempOccValue1);
+		rc = vec_splat4sw(r);				// Set rc = r r r r
+		t1 = vec_bitandnotleft1q(rc, rtov);
+		t2 = vec_bitand1q(rc, rtov);
+		o1 = vec_subtract4sw(t1, t2);
 	} else {
-		o1 = _mm_setzero_si128();
+		o1 = vec_zero1q();
 	}
 /*
 	if (occIndex1 != index1) {
@@ -864,27 +864,27 @@ void BWTAllOccValueTwoIndex(const BWT *bwt, unsigned int index1, unsigned int in
 
 		// The following code add tempOccvalue to occValue if index > occIndex and subtract tempOccValue from occValue if occIndex > index
 		r = -(occIndex1 > index2);
-		rc = _mm_set1_epi32(r);				// Set rc = r r r r
-		rtov = _mm_load_si128((__m128i*)tempOccValue2);
-		t1 = _mm_andnot_si128(rc, rtov);
-		t2 = _mm_and_si128(rc, rtov);
-		o2 = _mm_sub_epi32(t1, t2);
+		rc = vec_splat4sw(r);				// Set rc = r r r r
+		rtov = vec_load1q((__m128i*)tempOccValue2);
+		t1 = vec_bitandnotleft1q(rc, rtov);
+		t2 = vec_bitand1q(rc, rtov);
+		o2 = vec_subtract4sw(t1, t2);
 
 	} else {
-		o2 = _mm_setzero_si128();
+		o2 = vec_zero1q();
 	}
 
 	BWTAllOccValueExplicit(bwt, occExplicitIndex1, occValue1);
 	BWTAllOccValueExplicit(bwt, occExplicitIndex2, occValue2);
 
-	t1 = _mm_load_si128((__m128i*)occValue1);
-	t2 = _mm_load_si128((__m128i*)occValue2);
+	t1 = vec_load1q((__m128i*)occValue1);
+	t2 = vec_load1q((__m128i*)occValue2);
 
-	t1 = _mm_add_epi32(t1, o1);
-	t2 = _mm_add_epi32(t2, o2);
+	t1 = vec_add4sw(t1, o1);
+	t2 = vec_add4sw(t2, o2);
 
-	_mm_store_si128((__m128i*)occValue1, t1);
-	_mm_store_si128((__m128i*)occValue2, t2);
+	vec_store1q((__m128i*)occValue1, t1);
+	vec_store1q((__m128i*)occValue2, t2);
 
 
 
@@ -1031,17 +1031,17 @@ static INLINE void BWTAllOccValueExplicit(const BWT *bwt, const unsigned int occ
 	shift = 16 & compareMask;
 	mask = 0x0000FFFF | compareMask;
 
-	v2 = _mm_load_si128((__m128i *)(bwt->occValue + occIndexExplicit / OCC_VALUE_PER_WORD * ALPHABET_SIZE));
-	v1 = _mm_load_si128((__m128i *)(bwt->occValueMajor + occIndexMajor * ALPHABET_SIZE));
+	v2 = vec_load1q((__m128i *)(bwt->occValue + occIndexExplicit / OCC_VALUE_PER_WORD * ALPHABET_SIZE));
+	v1 = vec_load1q((__m128i *)(bwt->occValueMajor + occIndexMajor * ALPHABET_SIZE));
 
-	m = _mm_set1_epi32(mask);
+	m = vec_splat4sw(mask);
 
-	v2 = _mm_srli_epi32(v2, shift);
-	v2 = _mm_and_si128(v2, m);
+	v2 = vec_shiftrightimmediate4sw(v2, shift);
+	v2 = vec_bitand1q(v2, m);
 
-	v1 = _mm_add_epi32(v1, v2);
+	v1 = vec_add4sw(v1, v2);
 
-	_mm_store_si128((__m128i*)occValueExplicit, v1);
+	vec_store1q((__m128i*)occValueExplicit, v1);
 
 }
 
@@ -1051,14 +1051,14 @@ static INLINE void BWTPrefetchOccValueExplicit(const BWT *bwt, const unsigned in
 
 	occIndexMajor = occIndexExplicit * OCC_INTERVAL / OCC_INTERVAL_MAJOR;
 
-	_mm_prefetch((char*)(bwt->occValueMajor + occIndexMajor * ALPHABET_SIZE), _MM_HINT_T0);
-	_mm_prefetch((char*)(bwt->occValue + occIndexExplicit / OCC_VALUE_PER_WORD * ALPHABET_SIZE), _MM_HINT_NTA);
+	vec_prefetch((char*)(bwt->occValueMajor + occIndexMajor * ALPHABET_SIZE), vec_HINT_T0);
+	vec_prefetch((char*)(bwt->occValue + occIndexExplicit / OCC_VALUE_PER_WORD * ALPHABET_SIZE), vec_HINT_NTA);
 
 }
 
 static INLINE void BWTPrefetchBWT(const BWT *bwt, const unsigned int index) {
 
-	_mm_prefetch((char*)(bwt->bwtCode + index / CHAR_PER_WORD), _MM_HINT_NTA);
+	vec_prefetch((char*)(bwt->bwtCode + index / CHAR_PER_WORD), vec_HINT_NTA);
 
 }
 
--- BWTConstruct.c
+++ BWTConstruct.c
@@ -25,8 +25,8 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <emmintrin.h>
-#include <mmintrin.h>
+#include <vec128int.h>
+#include <vecmisc.h>
 #include "BWTConstruct.h"
 #include "MiscUtilities.h"
 #include "DNACount.h"
@@ -392,17 +392,17 @@ static void BWTIncPutPackedTextToRank(const unsigned int *packedText, unsigned i
 	rankIndex = numChar - 1;
 
 	// Unpack word-packed text; temp[0] will be character in the least significant 2 bits
-	p1 = _mm_cvtsi32_si128(packedText[lastWord]);
-	p2 = _mm_srli_epi32(p1, 4);
-	p1 = _mm_unpacklo_epi8(p1, p2);
+	p1 = vec_convert1swto1uq(packedText[lastWord]);
+	p2 = vec_shiftrightimmediate4sw(p1, 4);
+	p1 = vec_unpacklow88sb(p1, p2);
 
-	mask = _mm_set1_epi32(0x03030303);
+	mask = vec_splat4sw(0x03030303);
 
-	p2 = _mm_srli_epi32(p1, 2);
-	p1 = _mm_unpacklo_epi8(p1, p2);
+	p2 = vec_shiftrightimmediate4sw(p1, 2);
+	p1 = vec_unpacklow88sb(p1, p2);
 
-	p1 = _mm_and_si128(p1, mask);
-	_mm_store_si128((__m128i*)temp, p1);
+	p1 = vec_bitand1q(p1, mask);
+	vec_store1q((__m128i*)temp, p1);
 
 	for (i=CHAR_PER_WORD - numCharInLastWord; i<CHAR_PER_WORD; i++) {
 		cumulativeCount[temp[i]+1]++;
@@ -413,17 +413,17 @@ static void BWTIncPutPackedTextToRank(const unsigned int *packedText, unsigned i
 	for (i=lastWord; i--;) {	// loop from lastWord - 1 to 0
 
 		// Unpack word-packed text; temp[0] will be character in the least significant 2 bits
-		p1 = _mm_cvtsi32_si128(packedText[i]);
-		p2 = _mm_srli_epi32(p1, 4);
-		p1 = _mm_unpacklo_epi8(p1, p2);
+		p1 = vec_convert1swto1uq(packedText[i]);
+		p2 = vec_shiftrightimmediate4sw(p1, 4);
+		p1 = vec_unpacklow88sb(p1, p2);
 
-		mask = _mm_set1_epi32(0x03030303);
+		mask = vec_splat4sw(0x03030303);
 
-		p2 = _mm_srli_epi32(p1, 2);
-		p1 = _mm_unpacklo_epi8(p1, p2);
+		p2 = vec_shiftrightimmediate4sw(p1, 2);
+		p1 = vec_unpacklow88sb(p1, p2);
 
-		p1 = _mm_and_si128(p1, mask);
-		_mm_store_si128((__m128i*)temp, p1);
+		p1 = vec_bitand1q(p1, mask);
+		vec_store1q((__m128i*)temp, p1);
 
 		for (j=0; j<CHAR_PER_WORD; j++) {
 			cumulativeCount[temp[j]+1]++;
--- TypeNLimit.h
+++ TypeNLimit.h
@@ -65,8 +65,8 @@
 #define ALIGN_16	__attribute__((aligned(16)))
 #define ALIGN_32	__attribute__((aligned(32)))
 #define ALIGN_64	__attribute__((aligned(64)))
-#define MEMALIGN(a, b)	_mm_malloc(a, b)
-#define FREEALIGN(a)	_mm_free(a)
+#define MEMALIGN(a, b)	vec_malloc(a, b)
+#define FREEALIGN(a)	vec_free(a)
 
 #endif
 
--- MemManager.c
+++ MemManager.c
@@ -26,7 +26,8 @@
 #include <stdlib.h>
 #include <string.h>
 #ifndef _WIN32
-#include <mm_malloc.h>
+#include <vec128int.h>
+#include <vecmisc.h>
 #endif
 #include "MiscUtilities.h"
 #include "MemManager.h"
