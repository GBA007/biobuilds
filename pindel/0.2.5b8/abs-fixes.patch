# GCC >= 6.0 gets really cranky if you "#include <stdlib.h>" (happens when we
# #include the htslib headers) and try to call `abs()` on unsigned ints. Avoid
# such errors by casting the unsigned ints into (signed) longs. For details,
# see <https://gcc.gnu.org/gcc-6/porting_to.html#stdlib.h>.
--- src/bddata.cpp
+++ src/bddata.cpp
@@ -114,7 +114,7 @@
 
 			firstPos += g_SpacerBeforeAfter; // ??? ask Kai
 			secondPos += g_SpacerBeforeAfter;
-            if (firstChrName == secondChrName && secondChrName != "" && abs(firstPos - secondPos) < 500)
+            if (firstChrName == secondChrName && secondChrName != "" && abs((long)firstPos - (long)secondPos) < 500)
                 continue;
 			if ( firstChrName!="" && secondChrName!="") {
 				BreakDancerCoordinate firstBDCoordinate( firstChrName, firstPos );
@@ -162,10 +162,10 @@
 }*/
 bool RecipicalOverlap(RP_READ & first, RP_READ & second) {
 	int distance = 1000;
-	if (abs(first.PosA - first.PosA1) > distance) return false;
-	if (abs(first.PosB - first.PosB1) > distance) return false;
-	if (abs(second.PosA - second.PosA1) > distance) return false;
-	if (abs(second.PosB - second.PosB1) > distance) return false;
+	if (abs((long)first.PosA - (long)first.PosA1) > distance) return false;
+	if (abs((long)first.PosB - (long)first.PosB1) > distance) return false;
+	if (abs((long)second.PosA - (long)second.PosA1) > distance) return false;
+	if (abs((long)second.PosB - (long)second.PosB1) > distance) return false;
     float cutoff = 0.9;
     
     unsigned FirstPosA = (first.PosA + first.PosA1)/2;
@@ -377,7 +377,7 @@
                 	Reads_RP[first].PosB = Reads_RP[first].PosB + Reads_RP[first].ReadLength;
 			Reads_RP[first].PosB1 = Reads_RP[first].PosB1 + Reads_RP[first].ReadLength;
 		}
-		if (Reads_RP[first].ChrNameA == Reads_RP[first].ChrNameB && abs(Reads_RP[first].PosA - Reads_RP[first].PosB) < 500) Reads_RP[first].Visited = true;
+		if (Reads_RP[first].ChrNameA == Reads_RP[first].ChrNameB && abs((long)Reads_RP[first].PosA - (long)Reads_RP[first].PosB) < 500) Reads_RP[first].Visited = true;
 		//std::cout << "Final: " << Reads_RP[first].ChrNameA << " " << Reads_RP[first].DA << " " << Reads_RP[first].PosA << "\t" << Reads_RP[first].ChrNameB << " " << Reads_RP[first].DB << " " << Reads_RP[first].PosB << std::endl;
 	}
 }
@@ -630,12 +630,12 @@
 								<< "\t" << secondPos2 - g_SpacerBeforeAfter 
 								<< "\t" << currentState.Reads_RP_Discovery[read_index].DB 
 								<< "\t" << secondPos2 - secondPos << "\t"
-							        << abs((int)secondPos - (int)firstPos) << "\tSupport: " << currentState.Reads_RP_Discovery[read_index].NumberOfIdentical << "\t";
+							        << abs((long)secondPos - (long)firstPos) << "\tSupport: " << currentState.Reads_RP_Discovery[read_index].NumberOfIdentical << "\t";
 						DisplayBDSupportPerSample(currentState.Reads_RP_Discovery[read_index], RPoutputfile);
 						RPoutputfile << std::endl;
 						std::cout << "adding " << firstChrName << " " << ( (firstPos > g_SpacerBeforeAfter) ? firstPos - g_SpacerBeforeAfter : 1) << "\t" << firstPos2 - g_SpacerBeforeAfter << "\t" << currentState.Reads_RP_Discovery[read_index].DA << "\t" << firstPos2 - firstPos << "\t"
 							<< "\t" << secondChrName << " " << ( (secondPos > g_SpacerBeforeAfter) ? secondPos - g_SpacerBeforeAfter : 1)  << "\t" << secondPos2 - g_SpacerBeforeAfter << "\t" << currentState.Reads_RP_Discovery[read_index].DB << "\t" << secondPos2 - secondPos << "\t"
-							<< " to BD events. " << abs((int)secondPos - (int)firstPos) << " Support: " << currentState.Reads_RP_Discovery[read_index].NumberOfIdentical << std::endl;
+							<< " to BD events. " << abs((long)secondPos - (long)firstPos) << " Support: " << currentState.Reads_RP_Discovery[read_index].NumberOfIdentical << std::endl;
 					}
 				}
         
--- src/genotyping.cpp
+++ src/genotyping.cpp
@@ -124,7 +124,7 @@
     // step 4 for each variant, do genotyping
     for (unsigned SV_index =0; SV_index < AllSV4Genotyping.size(); SV_index++) {
         // step 4.1 if type == DEL, GenotypeDel
-        if (AllSV4Genotyping[SV_index].ChrA == AllSV4Genotyping[SV_index].ChrB && abs(AllSV4Genotyping[SV_index].PosA - AllSV4Genotyping[SV_index].PosB) < SV_Genotype_Cutoff) {
+        if (AllSV4Genotyping[SV_index].ChrA == AllSV4Genotyping[SV_index].ChrB && abs((long)AllSV4Genotyping[SV_index].PosA - (long)AllSV4Genotyping[SV_index].PosB) < SV_Genotype_Cutoff) {
             std::cout << "Skip One SV " << OneSV.Type << " " << OneSV.ChrA << " " << OneSV.PosA << " " 
                       << OneSV.CI_A << " " << OneSV.ChrB << " " << OneSV.PosB << " " 
                       << OneSV.CI_B << std::endl;
--- src/pindel.cpp
+++ src/pindel.cpp
@@ -1557,7 +1557,7 @@
 		for (unsigned index_b = index_a; index_b < All.size(); index_b++) {
 			if (index_a == index_b) continue;
 			if (All[index_a].FirstChrName == All[index_b].FirstChrName && All[index_a].SecondChrName == All[index_b].SecondChrName) {
-				if (abs(All[index_a].FirstPos - All[index_b].FirstPos) < 10 && abs(All[index_a].SecondPos - All[index_b].SecondPos) < 10 && All[index_a].NumSupport + All[index_b].NumSupport >= cutoff) {
+				if (abs((long)All[index_a].FirstPos - (long)All[index_b].FirstPos) < 10 && abs((long)All[index_a].SecondPos - (long)All[index_b].SecondPos) < 10 && All[index_a].NumSupport + All[index_b].NumSupport >= cutoff) {
 					
 					INToutputfile << "chr\t" << All[index_a].FirstChrName << "\tpos\t" << unsigned((All[index_a].FirstPos + All[index_b].FirstPos) / 2) << "\tchr\t" << All[index_a].SecondChrName << "\tpos\t" 
 							<< unsigned((All[index_a].SecondPos + All[index_b].SecondPos) / 2) << "\tseq\t" << All[index_a].InsertedSequence << "\tsupport\t" << All[index_a].NumSupport + All[index_b].NumSupport << "\tINFOR\t" 
